================================================================
Directory Structure
================================================================
code_1/
  assets/
    css/
      admin-dark.css
      admin.css
      frontend.css
    images/
      symbols/
        aed.svg
        sar.svg
    js/
      admin.js
      frontend.js
  includes/
    class-admin-appearance.txt
    class-admin-debug.txt
    class-admin-geolocation.txt
    class-admin-settings.txt
    class-frontend-logic.txt
    class-order-meta.txt
    class-product-meta.txt
  currify-currency-switcher.txt

================================================================
Files
================================================================

================
File: code_1/assets/css/admin-dark.css
================
  1: /* Currify Admin Dark Mode Styles */
  2: 
  3: .currify-dark-mode,
  4: .currify-dark-mode #wpcontent,
  5: .currify-dark-mode #wpfooter {
  6:     background-color: #1e1e1e;
  7:     color: #d4d4d4;
  8: }
  9: 
 10: /* --- General Typography & Links --- */
 11: .currify-dark-mode .wrap h1,
 12: .currify-dark-mode .wrap h2,
 13: .currify-dark-mode .wrap h3,
 14: .currify-dark-mode .wrap h4,
 15: .currify-dark-mode .form-table th {
 16:     color: #e0e0e0;
 17: }
 18: .currify-dark-mode p,
 19: .currify-dark-mode .description,
 20: .currify-dark-mode label,
 21: .currify-dark-mode td {
 22:     color: #d4d4d4;
 23: }
 24: .currify-dark-mode a {
 25:     color: #9cdcfe;
 26: }
 27: .currify-dark-mode a:hover {
 28:     color: #4fc1ff;
 29: }
 30: .currify-dark-mode hr {
 31:     background-color: #3c3c3c;
 32:     border-color: #3c3c3c;
 33: }
 34: 
 35: /* --- Theme Toggle --- */
 36: .currify-dark-mode .currify-theme-toggle {
 37:     border-color: #555;
 38:     color: #9e9e9e;
 39: }
 40: .currify-dark-mode .currify-theme-toggle:hover {
 41:     background-color: #333;
 42:     border-color: #888;
 43:     color: #fff;
 44: }
 45: 
 46: /* --- Tab Navigation --- */
 47: .currify-dark-mode .nav-tab-wrapper {
 48:     border-bottom-color: #3c3c3c;
 49: }
 50: .currify-dark-mode .nav-tab {
 51:     background: #2a2d2e;
 52:     border-color: #3c3c3c;
 53:     color: #ccc;
 54: }
 55: .currify-dark-mode .nav-tab:hover {
 56:     background: #333;
 57:     color: #fff;
 58: }
 59: .currify-dark-mode .nav-tab-active,
 60: .currify-dark-mode .nav-tab-active:hover {
 61:     background-color: #1e1e1e;
 62:     border-bottom-color: #1e1e1e;
 63:     color: #fff;
 64: }
 65: 
 66: /* --- Postbox / Card Styles --- */
 67: .currify-dark-mode .wrap .postbox {
 68:     border-color: #3c3c3c;
 69:     box-shadow: none;
 70:     background: #252526;
 71: }
 72: .currify-dark-mode .wrap .postbox-header {
 73:     border-bottom-color: #3c3c3c;
 74:     background: #2a2d2e;
 75: }
 76: .currify-dark-mode .wrap .postbox-header h2 {
 77:     color: #e0e0e0;
 78: }
 79: 
 80: /* --- Tables --- */
 81: .currify-dark-mode .form-table,
 82: .currify-dark-mode .wp-list-table {
 83:     background-color: transparent;
 84: }
 85: .currify-dark-mode .form-table th,
 86: .currify-dark-mode .wp-list-table th,
 87: .currify-dark-mode .form-table td,
 88: .currify-dark-mode .wp-list-table td {
 89:     border-color: #3c3c3c;
 90: }
 91: .currify-dark-mode .wp-list-table thead th {
 92:     color: #ccc;
 93:     background-color: #2a2d2e;
 94: }
 95: .currify-dark-mode .wp-list-table td {
 96:     background-color: #252526;
 97: }
 98: .currify-dark-mode .wp-list-table tbody tr.striped td {
 99:     background-color: #2a2d2e;
100: }
101: 
102: /* --- Inputs & Selects --- */
103: .currify-dark-mode input[type="text"],
104: .currify-dark-mode input[type="number"],
105: .currify-dark-mode select,
106: .currify-dark-mode textarea {
107:     background-color: #3c3c3c;
108:     border-color: #555;
109:     color: #d4d4d4;
110: }
111: .currify-dark-mode input[type="text"]:focus,
112: .currify-dark-mode input[type="number"]:focus,
113: .currify-dark-mode select:focus,
114: .currify-dark-mode textarea:focus {
115:     border-color: #0078d4;
116:     box-shadow: 0 0 0 1px #0078d4;
117:     color: #fff;
118: }
119: .currify-dark-mode .base-currency-row input[readonly],
120: .currify-dark-mode .base-currency-row select[disabled] {
121:     background-color: #333;
122:     color: #999;
123: }
124: 
125: /* --- Buttons --- */
126: .currify-dark-mode .button {
127:     border-color: #555;
128:     background-color: #3c3c3c;
129:     color: #ccc;
130: }
131: .currify-dark-mode .button:hover {
132:     border-color: #888;
133:     background-color: #444;
134:     color: #fff;
135: }
136: .currify-dark-mode .button-primary {
137:     background-color: #0078d4;
138:     border-color: #0078d4;
139:     color: #fff;
140: }
141: .currify-dark-mode .button-primary:hover {
142:     background-color: #106ebe;
143:     border-color: #106ebe;
144: }
145: .currify-dark-mode .button-link-delete .dashicons-trash {
146:     color: #f44336;
147: }
148: .currify-dark-mode .button-link-delete:hover .dashicons-trash {
149:     color: #ff6f61;
150: }
151: 
152: /* --- Notices & Statuses --- */
153: .currify-dark-mode .notice.notice-success {
154:     background-color: #385739;
155:     border-left-color: #4caf50;
156:     color: #d4d4d4;
157: }
158: .currify-dark-mode #currify-update-status.success {
159:     color: #4caf50;
160: }
161: .currify-dark-mode #currify-update-status.error {
162:     color: #f44336;
163: }
164: 
165: /* --- Experimental Feature Tag (Dark Mode) --- */
166: .currify-dark-mode .currify-experimental-tag {
167:     color: #ccc;
168:     background-color: #3c3c3c;
169:     border-color: #555;
170: }
171: 
172: /* --- Select2 Dark Mode --- */
173: .currify-dark-mode .select2-container--default .select2-selection--multiple {
174:     background-color: #3c3c3c;
175:     border-color: #555;
176: }
177: .currify-dark-mode .select2-container--default .select2-selection--multiple .select2-selection__choice {
178:     background-color: #2a2d2e;
179:     border-color: #3c3c3c;
180:     color: #d4d4d4;
181: }
182: .currify-dark-mode .select2-container--default .select2-selection--multiple .select2-selection__choice__remove {
183:     color: #ccc;
184: }
185: .currify-dark-mode .select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover {
186:     color: #ff6f61;
187: }
188: .currify-dark-mode .select2-dropdown {
189:     background-color: #252526;
190:     border-color: #3c3c3c;
191: }
192: .currify-dark-mode .select2-container--default .select2-results__option--highlighted[aria-selected] {
193:     background-color: #0078d4;
194:     color: white;
195: }
196: .currify-dark-mode .select2-container--default .select2-search--dropdown .select2-search__field {
197:     background-color: #3c3c3c;
198:     border-color: #555;
199:     color: #d4d4d4;
200: }
201: 
202: /*
203: ==================================
204: Appearance Tab (Dark Mode)
205: ==================================
206: */
207: .currify-dark-mode #currify-style-preview {
208:     border-color: #555;
209: }
210: .currify-dark-mode .currify-style-preview-box {
211:     background-color: #2a2d2e;
212: }
213: .currify-dark-mode #currify-style-preview .currify-active-currency,
214: .currify-dark-mode #currify-style-preview .currify-pill-item,
215: .currify-dark-mode #currify-style-preview .currify-list-item {
216:     color: #d4d4d4;
217: }
218: .currify-dark-mode #currify-style-preview .currify-style-dropdown-classic .currify-active-currency {
219:     border-color: #555;
220: }
221: .currify-dark-mode #currify-style-preview .currify-style-dropdown-classic .currify-active-currency:hover {
222:     border-color: #888;
223: }
224: .currify-dark-mode #currify-style-preview .currify-style-dropdown-classic .currify-currency-list {
225:     background-color: #252526;
226:     border-color: #555;
227: }
228: .currify-dark-mode #currify-style-preview .currify-style-dropdown-classic .currify-currency-link {
229:     color: #d4d4d4;
230: }
231: .currify-dark-mode #currify-style-preview .currify-style-dropdown-classic .currify-currency-link:hover {
232:     background-color: #333;
233: }
234: .currify-dark-mode #currify-style-preview .currify-style-pills-horizontal .currify-pills-list {
235:     border-color: #3c3c3c;
236: }
237: .currify-dark-mode #currify-style-preview .currify-style-pills-horizontal .currify-pill-item:hover {
238:     background-color: #3c3c3c;
239:     color: #fff;
240: }
241: .currify-dark-mode #currify-style-preview .currify-style-pills-horizontal .currify-pill-item.is-active {
242:     color: #fff;
243: }
244: .currify-dark-mode #currify-style-preview .currify-style-flags-horizontal .currify-flag-item:hover {
245:     border-color: #3c3c3c;
246: }
247: .currify-dark-mode #currify-style-preview .currify-style-list-vertical .currify-list,
248: .currify-dark-mode #currify-style-preview .currify-style-list-horizontal .currify-list {
249:     border-color: #555;
250: }
251: .currify-dark-mode #currify-style-preview .currify-style-list-vertical .currify-list li + li,
252: .currify-dark-mode #currify-style-preview .currify-style-list-horizontal .currify-list li + li {
253:     border-color: #555;
254: }
255: .currify-dark-mode #currify-style-preview .currify-list-item:hover {
256:     background-color: #3c3c3c;
257:     color: #fff;
258: }
259: .currify-dark-mode #currify-style-preview .currify-list-item.is-active {
260:     background-color: #333;
261: }
262: 
263: /* Dark Mode: Preview Grid & Scrolling */
264: .currify-dark-mode .currify-style-preview-box .currify-grid-view.currify-style-list-vertical .currify-list,
265: .currify-dark-mode .currify-style-preview-box .currify-grid-view.currify-style-list-horizontal .currify-list {
266:     background-color: #3c3c3c; /* Gap color for grid */
267: }
268: .currify-dark-mode .currify-style-preview-box .currify-row-limit-view {
269:     scrollbar-color: rgba(255,255,255,0.2) transparent;
270: }
271: .currify-dark-mode .currify-style-preview-box .currify-row-limit-view ::-webkit-scrollbar-thumb {
272:     background-color: rgba(255,255,255,0.2);
273: }
274: .currify-dark-mode .currify-style-preview-box .currify-row-limit-view ::-webkit-scrollbar-thumb:hover {
275:     background-color: rgba(255,255,255,0.35);
276: }
277: 
278: 
279: /* --- Specific Components --- */
280: .currify-dark-mode .currency-drag-handle,
281: .currify-dark-mode .base-currency-row .dashicons-lock {
282:     color: #c7c7c7;
283: }
284: .currify-dark-mode .currify-sortable-placeholder {
285:     background-color: #2a2d2e;
286:     border-color: #555;
287: }
288: .currify-dark-mode .currify-flag-cell .flag-preview {
289:     background-color: #3c3c3c;
290:     border-color: #555;
291: }
292: .currify-dark-mode .currify-flag-cell .flag-preview:hover {
293:     border-color: #0078d4;
294:     box-shadow: 0 0 0 1px #0078d4;
295: }
296: .currify-dark-mode .currify-flag-cell .clear-flag-button .dashicons-trash {
297:     color: #f44336;
298: }
299: .currify-dark-mode .currify-flag-cell .clear-flag-button:hover .dashicons-trash {
300:     color: #ff6f61;
301: }
302: .currify-dark-mode .currify-format-preview {
303:     background-color: #1e1e1e;
304:     border-color: #3c3c3c;
305:     color: #ccc;
306: }
307: .currify-dark-mode .currify-format-preview .preview-sep,
308: .currify-dark-mode .currify-format-preview .preview-decimals-input {
309:     background-color: #3c3c3c;
310:     border-color: #555;
311:     color: #d4d4d4;
312: }
313: .currify-dark-mode .currify-format-preview .preview-decimals-input:focus {
314:     border-color: #0078d4;
315:     box-shadow: 0 0 0 1px #0078d4;
316: }
317: 
318: 
319: /* --- Floating Save Button (Dark Mode) --- */
320: .currify-dark-mode #currify-floating-submit {
321:     box-shadow: 0 5px 15px rgba(0,0,0,0.3);
322: }
323: .currify-dark-mode #currify-floating-submit.is-dirty {
324:     background-color: #f56e28;
325:     border-color: #f56e28;
326:     color: #fff;
327: }
328: .currify-dark-mode #currify-floating-submit.is-dirty:hover {
329:     background-color: #db5e1f;
330:     border-color: #db5e1f;
331: }
332: .currify-dark-mode #currify-floating-submit.is-saving,
333: .currify-dark-mode #currify-floating-submit.is-saving:disabled {
334:     background-color: #f56e28 !important;
335:     border-color: #f56e28 !important;
336:     color: #fff !important;
337:     opacity: 0.8;
338: }
339: .currify-dark-mode #currify-floating-submit.is-success,
340: .currify-dark-mode #currify-floating-submit.is-success:disabled {
341:     background-color: #4caf50 !important;
342:     border-color: #45a049 !important;
343:     color: #fff !important;
344:     opacity: 1;
345: }
346: .currify-dark-mode #currify-floating-submit.is-success:hover,
347: .currify-dark-mode #currify-floating-submit.is-success:disabled:hover {
348:     background-color: #45a049 !important;
349:     border-color: #3e8e41 !important;
350: }
351: 
352: /* --- Debug Section --- */
353: .currify-dark-mode .currify-debug-pre {
354:     background-color: #1e1e1e;
355:     border-color: #3c3c3c;
356:     color: #ccc;
357: }
358: .currify-dark-mode .currify-debug-delete {
359:     background-color: #5c1f1f !important;
360:     border-color: #f44336 !important;
361:     color: #ffb1ab !important;
362: }
363: .currify-dark-mode .currify-debug-delete:hover {
364:     background-color: #f44336 !important;
365:     border-color: #dc2f23 !important;
366:     color: #fff !important;
367: }

================
File: code_1/assets/css/admin.css
================
  1: /* Currify Admin Settings Styles */
  2: 
  3: /* --- Settings Header & Theme Toggle --- */
  4: .currify-settings-header {
  5:     display: flex;
  6:     align-items: center;
  7:     justify-content: space-between;
  8:     margin-bottom: 1em;
  9: }
 10: .currify-theme-toggle {
 11:     background: none;
 12:     border: 1px solid #c3c4c7;
 13:     border-radius: 50%;
 14:     cursor: pointer;
 15:     width: 36px;
 16:     height: 36px;
 17:     padding: 6px;
 18:     color: #50575e;
 19:     transition: all 0.2s ease-in-out;
 20: }
 21: .currify-theme-toggle:hover {
 22:     background-color: #f0f0f1;
 23:     border-color: #8c8f94;
 24:     color: #1d2327;
 25: }
 26: .currify-theme-toggle svg {
 27:     width: 100%;
 28:     height: 100%;
 29: }
 30: .currify-theme-toggle .moon { display: block; }
 31: .currify-theme-toggle .sun { display: none; }
 32: 
 33: .currify-dark-mode .currify-theme-toggle .moon { display: none; }
 34: .currify-dark-mode .currify-theme-toggle .sun { display: block; }
 35: 
 36: 
 37: /* --- Tab Navigation --- */
 38: .nav-tab-wrapper {
 39:     margin-bottom: 20px;
 40: }
 41: .nav-tab {
 42:     border-bottom: 1px solid #c3c4c7;
 43: }
 44: .nav-tab-active,
 45: .nav-tab-active:hover {
 46:     background-color: #fff;
 47:     border-bottom-color: #fff;
 48: }
 49: 
 50: /* --- Tab Panes --- */
 51: .currify-tab-pane {
 52:     display: none;
 53:     animation: currify-fade-in 0.3s ease-in-out;
 54: }
 55: .currify-tab-pane.active {
 56:     display: block;
 57: }
 58: @keyframes currify-fade-in {
 59:     from { opacity: 0; }
 60:     to { opacity: 1; }
 61: }
 62: 
 63: 
 64: /* --- Postbox / Card Styles --- */
 65: .wrap .postbox {
 66:     border: 1px solid #c3c4c7;
 67:     box-shadow: 0 1px 1px rgba(0,0,0,.04);
 68:     background: #fff;
 69:     margin-top: 0;
 70:     margin-bottom: 20px;
 71:     border-radius: 4px;
 72: }
 73: .wrap .postbox-header {
 74:     padding: 8px 12px;
 75:     border-bottom: 1px solid #c3c4c7;
 76:     background: #fcfcfc;
 77: }
 78: .wrap .postbox-header h2 {
 79:     font-size: 14px;
 80:     padding: 0;
 81:     margin: 0;
 82:     line-height: 1.4;
 83:     font-weight: 600;
 84: }
 85: .wrap .postbox .inside {
 86:     padding: 12px;
 87: }
 88: .wrap .postbox .inside .form-table {
 89:     margin-top: 0;
 90: }
 91: .wrap .postbox .inside p.description:first-child {
 92:     margin-top: 0;
 93: }
 94: .wrap .postbox .inside p.description {
 95:     margin-bottom: 20px;
 96: }
 97: 
 98: /* --- Main Tables --- */
 99: .wp-list-table {
100:     border: none;
101:     box-shadow: none;
102: }
103: .wp-list-table td,
104: .wp-list-table th {
105:     vertical-align: middle;
106: }
107: 
108: /* Specific styling for repeatable tables */
109: #currify-geolocation-rules-table td,
110: #currify-currencies-table td {
111:     padding-top: 12px;
112:     padding-bottom: 12px;
113: }
114: #currify-geolocation-rules-table thead th,
115: #currify-currencies-table thead th {
116:     text-align: left;
117: }
118: .wp-list-table .column-actions {
119:     width: 5%;
120:     text-align: center;
121: }
122: 
123: /* Currency Table Column widths */
124: #currify-currencies-table .column-drag { width: 3%; text-align: center; }
125: #currify-currencies-table .column-code { width: 10%; }
126: #currify-currencies-table .column-symbol { width: 10%; }
127: #currify-currencies-table .column-flag { width: 8%; }
128: #currify-currencies-table .column-rate-source { width: 12%; }
129: #currify-currencies-table .column-rate { width: 10%; }
130: #currify-currencies-table .column-position { width: 10%; }
131: #currify-currencies-table .column-formatting { width: 32%; }
132: 
133: 
134: /* Expand inputs to fill cell */
135: #currify-currencies-table > tbody > tr > td > input[type="text"],
136: #currify-currencies-table > tbody > tr > td > select {
137:     width: 100%;
138:     box-sizing: border-box;
139: }
140: 
141: /* Drag and Drop Styles */
142: .currency-drag-handle {
143:     cursor: move;
144:     color: #a0a5aa;
145: }
146: .currify-sortable-placeholder {
147:     height: 60px;
148:     background-color: #f0f0f1;
149:     border: 1px dashed #b4b9be;
150: }
151: .ui-sortable-helper {
152:     box-shadow: 0 5px 15px rgba(0,0,0,0.1);
153:     background: #fff;
154: }
155: .base-currency-row input[readonly],
156: .base-currency-row select[disabled] {
157:     background-color: #f0f0f1;
158:     color: #50575e;
159: }
160: .base-currency-row .dashicons-lock {
161:     color: #a0a5aa;
162:     font-size: 18px;
163: }
164: 
165: 
166: /* Flag Uploader Cell */
167: .currify-flag-cell {
168:     display: flex;
169:     align-items: center;
170:     gap: 8px;
171: }
172: .currify-flag-cell .flag-preview {
173:     display: flex;
174:     align-items: center;
175:     justify-content: center;
176:     width: 32px;
177:     height: 24px;
178:     background-color: #f0f0f1;
179:     border: 1px dashed #b4b9be;
180:     border-radius: 2px;
181:     cursor: pointer;
182:     transition: border-color 0.2s ease, box-shadow 0.2s ease;
183:     flex-shrink: 0;
184: }
185: .currify-flag-cell .flag-preview:hover {
186:     border-color: #007cba;
187:     box-shadow: 0 0 0 1px #007cba;
188: }
189: .currify-flag-cell .clear-flag-button {
190:     text-decoration: none;
191:     cursor: pointer;
192:     line-height: 1;
193: }
194: .currify-flag-cell .clear-flag-button .dashicons-trash {
195:     font-size: 18px;
196:     color: #a00;
197:     transition: color 0.1s ease-in-out;
198:     vertical-align: middle;
199: }
200: .currify-flag-cell .clear-flag-button:hover .dashicons-trash {
201:     color: #dc3232;
202: }
203: .currify-flag-cell .clear-flag-button.hidden {
204:     display: none;
205: }
206: .currify-flag-cell .flag-preview img {
207:     max-width: 100%;
208:     height: auto;
209:     display: block;
210:     border-radius: 1px;
211: }
212: 
213: /* Formatting Editor */
214: .currify-format-preview {
215:     display: flex;
216:     align-items: center;
217:     justify-content: center;
218:     background-color: #f0f0f1;
219:     border: 1px solid #ddd;
220:     border-radius: 4px;
221:     padding: 8px 12px;
222:     font-size: 14px;
223:     font-weight: 600;
224:     font-family: monospace;
225:     color: #3c434a;
226: }
227: .currify-format-preview .preview-symbol,
228: .currify-format-preview .preview-number {
229:     padding: 0 2px;
230: }
231: .currify-format-preview .preview-sep {
232:     width: 20px;
233:     padding: 2px;
234:     text-align: center;
235:     border: 1px solid #b4b9be;
236:     border-radius: 2px;
237:     background-color: #fff;
238:     font-family: monospace;
239: }
240: .currify-format-preview .preview-decimals-input {
241:     width: 3ch;
242:     padding: 2px;
243:     text-align: center;
244:     border: 1px solid #b4b9be;
245:     border-radius: 2px;
246:     background-color: #fff;
247:     font-family: monospace;
248:     font-weight: 600;
249:     color: #3c434a;
250:     -moz-appearance: textfield;
251:     margin-left: 2px;
252: }
253: .currify-format-preview .preview-decimals-input::-webkit-outer-spin-button,
254: .currify-format-preview .preview-decimals-input::-webkit-inner-spin-button {
255:     -webkit-appearance: none;
256:     margin: 0;
257: }
258: .currify-format-preview .preview-decimals-input:focus {
259:     border-color: #007cba;
260:     box-shadow: 0 0 0 1px #007cba;
261:     outline: 1px solid transparent;
262: }
263: 
264: .currify-format-editor .left-symbol,
265: .currify-format-editor .right-symbol {
266:     display: none;
267: }
268: .currify-format-editor.position-left .left-symbol {
269:     display: inline-block;
270: }
271: .currify-format-editor.position-right .right-symbol {
272:     display: inline-block;
273: }
274: 
275: /* Remove Button */
276: .remove-currency-row, .remove-geolocation-rule {
277:     text-decoration: none;
278: }
279: .remove-currency-row .dashicons-trash,
280: .remove-geolocation-rule .dashicons-trash {
281:     font-size: 18px;
282:     color: #b32d2e;
283:     transition: color 0.1s ease-in-out;
284: }
285: .remove-currency-row:hover .dashicons-trash,
286: .remove-geolocation-rule:hover .dashicons-trash {
287:     color: #dc3232;
288: }
289: 
290: /* Experimental Feature Tag */
291: .currify-experimental-tag {
292:     display: inline-block;
293:     margin-left: 8px;
294:     padding: 2px 6px;
295:     font-size: 10px;
296:     font-weight: 600;
297:     line-height: 1;
298:     color: #5f5f5f;
299:     background-color: #f0f0f1;
300:     border: 1px solid #dcdcde;
301:     border-radius: 4px;
302:     vertical-align: middle;
303:     text-transform: uppercase;
304: }
305: 
306: /* Select2 Styles */
307: .select2-container--default .select2-selection--multiple {
308:     border: 1px solid #8c8f94;
309:     border-radius: 4px;
310: }
311: .select2-container .select2-search--inline .select2-search__field {
312:     margin-top: 8px; /* Better alignment */
313: }
314: .select2-container--default .select2-selection--multiple .select2-selection__choice {
315:     background-color: #f0f0f1;
316:     border-color: #dcdcde;
317:     border-radius: 4px;
318:     padding: 2px 6px;
319: }
320: .select2-container--default .select2-selection--multiple .select2-selection__choice__remove {
321:     color: #50575e;
322:     margin-right: 4px;
323: }
324: .select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover {
325:     color: #b32d2e;
326: }
327: 
328: 
329: /* Update status message */
330: .currify-update-status.success {
331:     color: #00a32a;
332:     font-weight: 600;
333: }
334: .currify-update-status.error {
335:     color: #d63638;
336:     font-weight: 600;
337: }
338: 
339: /* Tfoot update controls alignment */
340: #currify-currencies-table tfoot .currify-update-spinner,
341: #currify-currencies-table tfoot .currify-update-status {
342:     vertical-align: middle;
343: }
344: .currify-update-spinner {
345:     float: none;
346:     visibility: hidden;
347: }
348: .currify-update-status {
349:     margin-left: 10px;
350: }
351: 
352: /*
353: ==================================
354: Appearance Tab
355: ==================================
356: */
357: .currify-appearance-grid {
358:     display: grid;
359:     grid-template-columns: 1fr 1fr;
360:     gap: 30px;
361:     align-items: start;
362: }
363: @media (max-width: 960px) {
364:     .currify-appearance-grid {
365:         grid-template-columns: 1fr;
366:     }
367: }
368: .currify-appearance-preview-area {
369:     position: sticky;
370:     top: 50px;
371: }
372: #currify_style_select {
373:     min-width: 250px;
374: }
375: 
376: .currify-layout-controls {
377:     display: flex;
378:     flex-wrap: wrap;
379:     gap: 30px;
380:     align-items: flex-start;
381: }
382: .currify-layout-control-item {
383:     display: flex;
384:     flex-direction: column;
385: }
386: .currify-layout-control-item label {
387:     margin-bottom: 4px;
388:     font-weight: 500;
389: }
390: .currify-layout-control-item p.description {
391:     margin-top: 4px;
392:     margin-bottom: 0;
393:     max-width: 250px;
394: }
395: .currify-layout-control-item label input[type="checkbox"] {
396:     margin-right: 4px;
397: }
398: 
399: 
400: /*
401: ==================================
402: Appearance Tab Live Preview
403: ==================================
404: */
405: #currify-style-preview {
406:     padding: 20px;
407:     border: 1px dashed #b4b9be;
408:     border-radius: 4px;
409:     transition: background-color 0.3s;
410: }
411: #currify-style-preview h4 { margin-top: 0; }
412: .currify-style-preview-box {
413:     display: flex;
414:     align-items: center;
415:     justify-content: center;
416:     min-height: 120px;
417:     background-color: #f0f0f1;
418:     padding: 2em;
419:     border-radius: 4px;
420:     transition: all 0.2s ease;
421: }
422: .currify-preview-tabs {
423:     margin-bottom: 1em;
424:     border-bottom: 1px solid #dcdcde;
425: }
426: .currify-preview-tabs button {
427:     background: none;
428:     border: none;
429:     border-bottom: 2px solid transparent;
430:     padding: 8px 12px;
431:     cursor: pointer;
432:     font-size: 13px;
433:     color: #50575e;
434:     margin-bottom: -1px;
435: }
436: .currify-preview-tabs button.active {
437:     border-bottom-color: #2271b1;
438:     font-weight: 600;
439:     color: #1d2327;
440: }
441: .currify-preview-pane { display: none; }
442: .currify-preview-pane.active { display: block; }
443: .currify-style-preview-box .preview-wrapper {
444:     display: none; /* JS will show the correct one */
445: }
446: 
447: /* Use frontend CSS for preview, but scoped and simplified */
448: .currify-style-preview-box .currify-flag {
449:     width: 22px;
450:     height: 16px;
451:     border-radius: 2px;
452:     object-fit: cover;
453:     flex-shrink: 0;
454:     box-shadow: 0 0 2px rgba(0,0,0,0.25);
455: }
456: .currify-style-preview-box .currify-flag-emoji {
457:     font-size: 14px;
458:     line-height: 1;
459:     box-shadow: none;
460:     background: #e0e0e0;
461:     width: 22px;
462:     height: 16px;
463:     display: inline-flex;
464:     align-items: center;
465:     justify-content: center;
466:     font-family: sans-serif;
467:     font-weight: bold;
468:     color: #555;
469:     text-align: center;
470: }
471: 
472: /* Preview: Dropdowns */
473: .currify-style-preview-box .currify-style-dropdown-classic,
474: .currify-style-preview-box .currify-style-dropdown-horizontal {
475:     position: relative;
476:     width: 120px;
477: }
478: .currify-style-preview-box .currify-active-currency {
479:     display: flex;
480:     align-items: center;
481:     gap: 8px;
482:     padding: 8px 12px;
483:     border: 1px solid #ccc;
484:     border-radius: 6px;
485:     background-color: var(--currify-background-color);
486:     cursor: pointer;
487:     transition: all 0.2s;
488:     user-select: none;
489: }
490: .currify-style-preview-box .currify-active-currency:hover { border-color: #999; }
491: .currify-style-preview-box .switcher-open .currify-active-currency {
492:     border-color: var(--currify-primary-color);
493:     box-shadow: 0 0 6px rgba(0,115,170,0.3);
494: }
495: .currify-style-preview-box .currify-arrow {
496:     margin-left: auto;
497:     font-size: 10px;
498:     transition: transform 0.3s ease;
499: }
500: .currify-style-preview-box .currify-style-dropdown-classic.switcher-open .currify-arrow { transform: rotate(180deg); }
501: .currify-style-preview-box .currify-style-dropdown-horizontal.switcher-open .currify-arrow { transform: rotate(90deg); }
502: .currify-style-preview-box .currify-currency-list {
503:     position: absolute;
504:     top: 100%;
505:     left: 0;
506:     width: 100%;
507:     background-color: #fff;
508:     border: 1px solid var(--currify-primary-color);
509:     box-shadow: 0 8px 16px rgba(0,0,0,0.15);
510:     opacity: 0;
511:     visibility: hidden;
512:     transform: translateY(-8px);
513:     transition: all 0.25s ease;
514:     z-index: 10;
515: }
516: .currify-style-preview-box .switcher-open .currify-currency-list {
517:     opacity: 1;
518:     visibility: visible;
519:     transform: translateY(0);
520: }
521: .currify-style-preview-box .currify-currency-list ul {
522:     list-style: none;
523:     margin: 0;
524:     padding: 0;
525: }
526: .currify-style-preview-box .currify-currency-link {
527:     display: flex;
528:     align-items: center;
529:     gap: 8px;
530:     padding: 8px 12px;
531:     color: #333;
532:     transition: all 0.2s ease;
533:     text-decoration: none;
534: }
535: .currify-style-preview-box .currify-currency-link:hover {
536:     background-color: #f0f8ff;
537:     color: var(--currify-primary-color);
538: }
539: .currify-style-preview-box .currify-style-dropdown-classic .currify-currency-list {
540:     border-top: none;
541:     border-radius: 0 0 6px 6px;
542: }
543: .currify-style-preview-box .currify-style-dropdown-horizontal .currify-currency-list {
544:     border-radius: 6px;
545:     width: auto;
546:     min-width: 100%;
547:     max-width: 280px;
548:     overflow-x: auto;
549: }
550: .currify-style-preview-box .currify-style-dropdown-horizontal ul {
551:     display: flex;
552:     padding: 4px;
553: }
554: .currify-style-preview-box .currify-style-dropdown-horizontal .currify-currency-link {
555:     border-radius: 4px;
556:     white-space: nowrap;
557: }
558: .currify-style-preview-box .currify-style-dropdown-horizontal .currify-currency-link.is-active {
559:     color: var(--currify-primary-color);
560:     font-weight: 600;
561:     background-color: #f0f8ff;
562: }
563: 
564: /* Preview: Pills */
565: .currify-style-preview-box .currify-style-pills-horizontal .currify-pills-list {
566:     display: flex;
567:     align-items: center;
568:     gap: 4px;
569:     background-color: var(--currify-background-color);
570:     border-radius: 20px;
571:     padding: 4px;
572:     border: 1px solid #e0e0e0;
573: }
574: .currify-style-preview-box .currify-style-pills-horizontal .currify-pill-item {
575:     display: flex;
576:     align-items: center;
577:     gap: 6px;
578:     padding: 6px 12px;
579:     border-radius: 16px;
580:     text-decoration: none;
581:     color: #555;
582:     font-weight: 500;
583:     transition: all 0.25s ease-in-out;
584: }
585: .currify-style-preview-box .currify-style-pills-horizontal .currify-pill-item:hover {
586:     background-color: #e9e9e9;
587:     color: #111;
588: }
589: .currify-style-preview-box .currify-style-pills-horizontal .currify-pill-item.is-active {
590:     background-color: var(--currify-primary-color);
591:     color: #fff;
592:     box-shadow: 0 2px 4px rgba(0,0,0,0.1);
593: }
594: .currify-style-preview-box .currify-style-pills-horizontal .currify-pill-item.is-active:hover {
595:     background-color: var(--currify-primary-color);
596: }
597: 
598: /* Preview: Flags */
599: .currify-style-preview-box .currify-style-flags-horizontal .currify-flags-list {
600:     display: flex;
601:     align-items: center;
602:     gap: 8px;
603: }
604: .currify-style-preview-box .currify-style-flags-horizontal .currify-flag-item {
605:     display: block;
606:     line-height: 0;
607:     border-radius: 4px;
608:     padding: 3px;
609:     border: 2px solid transparent;
610:     transition: all 0.2s ease;
611: }
612: .currify-style-preview-box .currify-style-flags-horizontal .currify-flag-item:hover {
613:     border-color: #e0e0e0;
614: }
615: .currify-style-preview-box .currify-style-flags-horizontal .currify-flag-item.is-active {
616:     border-color: var(--currify-primary-color);
617:     box-shadow: 0 0 8px rgba(0,115,170,0.4);
618: }
619: .currify-style-preview-box .currify-style-flags-horizontal .currify-flag-item .currify-flag {
620:     display: block;
621: }
622: 
623: /* Preview: Lists */
624: .currify-style-preview-box .currify-style-list-vertical .currify-list,
625: .currify-style-preview-box .currify-style-list-horizontal .currify-list {
626:     list-style: none;
627:     margin: 0;
628:     padding: 0;
629:     border: 1px solid #ccc;
630:     border-radius: 4px;
631:     background-color: var(--currify-background-color);
632: }
633: .currify-style-preview-box .currify-style-list-horizontal .currify-list {
634:     display: flex;
635: }
636: .currify-style-preview-box .currify-style-list-vertical .currify-list li + li {
637:     border-top: 1px solid #ccc;
638: }
639: .currify-style-preview-box .currify-style-list-horizontal .currify-list li + li {
640:     border-left: 1px solid #ccc;
641: }
642: .currify-style-preview-box .currify-list-item {
643:     display: flex;
644:     align-items: center;
645:     gap: 8px;
646:     padding: 8px 12px;
647:     text-decoration: none;
648:     color: #555;
649:     transition: all 0.2s ease;
650: }
651: .currify-style-preview-box .currify-list-item:hover {
652:     background-color: #f5f5f5;
653:     color: #111;
654: }
655: .currify-style-preview-box .currify-list-item.is-active {
656:     color: var(--currify-primary-color);
657:     font-weight: 600;
658:     background-color: #f0f8ff;
659: }
660: 
661: /* --- Preview: Grid & Scrolling --- */
662: .currify-style-preview-box .currify-grid-view.currify-style-dropdown-classic .currify-currency-list ul,
663: .currify-style-preview-box .currify-grid-view.currify-style-pills-horizontal .currify-pills-list,
664: .currify-style-preview-box .currify-grid-view.currify-style-flags-horizontal .currify-flags-list,
665: .currify-style-preview-box .currify-grid-view.currify-style-list-horizontal .currify-list,
666: .currify-style-preview-box .currify-grid-view.currify-style-list-vertical .currify-list {
667:     display: grid;
668:     grid-template-columns: repeat(var(--currify-grid-columns, 1), 1fr);
669: }
670: .currify-style-preview-box .currify-grid-view.currify-style-dropdown-classic .currify-currency-list ul {
671:     gap: 4px;
672:     padding: 4px;
673: }
674: .currify-style-preview-box .currify-grid-view.currify-style-dropdown-classic .currify-currency-list {
675:     width: max-content;
676:     min-width: 100%;
677: }
678: .currify-style-preview-box .currify-grid-view.currify-style-dropdown-classic .currify-currency-link {
679:     justify-content: center;
680:     border-radius: 4px;
681: }
682: .currify-style-preview-box .currify-grid-view.currify-style-pills-horizontal .currify-pills-list {
683:     border-radius: 8px;
684:     width: 100%;
685: }
686: .currify-style-preview-box .currify-grid-view.currify-style-flags-horizontal .currify-flag-item {
687:     justify-self: center;
688: }
689: .currify-style-preview-box .currify-grid-view.currify-style-list-vertical .currify-list,
690: .currify-style-preview-box .currify-grid-view.currify-style-list-horizontal .currify-list {
691:     gap: 1px;
692:     background-color: #eee;
693: }
694: .currify-style-preview-box .currify-grid-view.currify-style-list-vertical .currify-list li,
695: .currify-style-preview-box .currify-grid-view.currify-style-list-horizontal .currify-list li {
696:     background-color: var(--currify-background-color);
697: }
698: .currify-style-preview-box .currify-grid-view.currify-style-list-vertical .currify-list li + li,
699: .currify-style-preview-box .currify-grid-view.currify-style-list-horizontal .currify-list li + li {
700:     border: none;
701: }
702: 
703: .currify-style-preview-box .currify-row-limit-view .currify-currency-list ul,
704: .currify-style-preview-box .currify-row-limit-view .currify-pills-list,
705: .currify-style-preview-box .currify-row-limit-view .currify-flags-list,
706: .currify-style-preview-box .currify-row-limit-view .currify-list {
707:     --currify-row-height: 40px;
708:     max-height: calc(var(--currify-max-rows) * var(--currify-row-height));
709:     overflow-y: auto;
710:     overflow-x: hidden;
711:     scrollbar-color: rgba(0,0,0,0.2) transparent;
712:     scrollbar-width: thin;
713: }
714: 
715: .currify-style-preview-box .currify-row-limit-view ::-webkit-scrollbar {
716:     width: 6px;
717:     height: 6px;
718: }
719: .currify-style-preview-box .currify-row-limit-view ::-webkit-scrollbar-thumb {
720:     background-color: rgba(0,0,0,0.2);
721:     border-radius: 3px;
722: }
723: .currify-style-preview-box .currify-row-limit-view ::-webkit-scrollbar-thumb:hover {
724:     background-color: rgba(0,0,0,0.35);
725: }
726: 
727: 
728: /* --- Floating Save Button --- */
729: #currify-floating-save-container {
730:     position: fixed;
731:     bottom: 30px;
732:     right: 30px;
733:     z-index: 9999;
734: }
735: #currify-floating-save-container.hidden {
736:     display: none;
737: }
738: #currify-floating-submit {
739:     display: flex;
740:     align-items: center;
741:     gap: 8px;
742:     padding: 12px 24px;
743:     font-size: 16px;
744:     line-height: 1;
745:     box-shadow: 0 5px 15px rgba(0,0,0,0.15);
746:     transition: all 0.2s ease-in-out;
747: }
748: #currify-floating-submit .currify-save-icon {
749:     font-size: 20px;
750:     width: 20px;
751:     height: 20px;
752: }
753: #currify-floating-submit .currify-save-icon.spin {
754:     animation: rotation 1.5s infinite linear;
755: }
756: @keyframes rotation {
757:   from { transform: rotate(0deg); }
758:   to { transform: rotate(359deg); }
759: }
760: 
761: #currify-floating-submit.is-dirty {
762:     background-color: #f56e28;
763:     border-color: #f56e28;
764:     color: #fff;
765: }
766: #currify-floating-submit.is-dirty:hover {
767:     background-color: #db5e1f;
768:     border-color: #db5e1f;
769: }
770: #currify-floating-submit.is-saving,
771: #currify-floating-submit.is-saving:disabled {
772:     background-color: #f56e28 !important;
773:     border-color: #f56e28 !important;
774:     color: #fff !important;
775:     opacity: 0.8;
776:     cursor: wait;
777: }
778: #currify-floating-submit.is-success,
779: #currify-floating-submit.is-success:disabled {
780:     background-color: #227d39 !important;
781:     border-color: #227d39 !important;
782:     color: #fff !important;
783:     opacity: 1;
784: }
785: #currify-floating-submit.is-success:hover,
786: #currify-floating-submit.is-success:disabled:hover {
787:     background-color: #1e6a31 !important;
788:     border-color: #1e6a31 !important;
789: }
790: 
791: /* --- Debug Section --- */
792: .currify-debug-loader {
793:     display: flex;
794:     align-items: center;
795:     justify-content: center;
796:     flex-direction: column;
797:     min-height: 150px;
798:     text-align: center;
799:     color: #50575e;
800: }
801: .currify-debug-loader .spinner {
802:     float: none;
803:     margin: 0 0 10px 0;
804: }
805: .currify-debug-pre {
806:     background-color: #f0f0f1;
807:     border: 1px solid #ddd;
808:     padding: 10px;
809:     border-radius: 4px;
810:     white-space: pre-wrap;
811:     word-break: break-all;
812:     font-family: monospace;
813:     max-height: 300px;
814:     overflow-y: auto;
815: }
816: .currify-debug-delete {
817:     background-color: #fbeaea !important;
818:     border-color: #dc3232 !important;
819:     color: #b32d2e !important;
820:     box-shadow: none !important;
821:     text-shadow: none !important;
822: }
823: .currify-debug-delete:hover {
824:     background-color: #dc3232 !important;
825:     border-color: #b32d2e !important;
826:     color: #fff !important;
827: }

================
File: code_1/assets/css/frontend.css
================
  1: /* Currify Switcher Styles */
  2: 
  3: /* --- CSS Variables (overridden by dynamic CSS from settings) --- */
  4: :root {
  5:     --currify-primary-color: #0073aa;
  6:     --currify-background-color: #fafafa;
  7: }
  8: 
  9: /* --- Base Container --- */
 10: .currify-switcher-container {
 11:     position: relative;
 12:     display: inline-block;
 13:     font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
 14:     font-size: 14px;
 15:     z-index: 100;
 16:     user-select: none;
 17: }
 18: 
 19: .currify-flag {
 20:     width: 22px;
 21:     height: 16px;
 22:     border-radius: 2px;
 23:     object-fit: cover;
 24:     box-shadow: 0 0 2px rgba(0,0,0,0.25);
 25:     flex-shrink: 0;
 26: }
 27: 
 28: 
 29: /* 
 30: ==================================
 31: Style 1: Classic Dropdown
 32: ==================================
 33: */
 34: 
 35: /* --- Active (selected) currency display --- */
 36: .currify-style-dropdown-classic .currify-active-currency,
 37: .currify-style-dropdown-horizontal .currify-active-currency {
 38:     display: flex;
 39:     align-items: center;
 40:     justify-content: space-between;
 41:     gap: 8px;
 42:     padding: 8px 12px;
 43:     border: 1px solid #ccc;
 44:     border-radius: 6px;
 45:     background-color: var(--currify-background-color);
 46:     cursor: pointer;
 47:     transition: 
 48:         border-color 0.25s ease,
 49:         box-shadow 0.25s ease,
 50:         background-color 0.25s ease;
 51:     min-width: 100px;
 52: }
 53: 
 54: .currify-style-dropdown-classic .currify-active-currency:hover,
 55: .currify-style-dropdown-horizontal .currify-active-currency:hover {
 56:     border-color: #999;
 57: }
 58: 
 59: .currify-style-dropdown-classic.switcher-open .currify-active-currency {
 60:     border-color: var(--currify-primary-color);
 61:     box-shadow: 0 0 6px rgba(0,115,170,0.3);
 62:     border-bottom-left-radius: 0;
 63:     border-bottom-right-radius: 0;
 64: }
 65: 
 66: .currify-style-dropdown-classic .currify-arrow,
 67: .currify-style-dropdown-horizontal .currify-arrow {
 68:     margin-left: auto;
 69:     font-size: 10px;
 70:     color: #555;
 71:     transition: transform 0.3s ease;
 72: }
 73: 
 74: .currify-style-dropdown-classic.switcher-open .currify-arrow {
 75:     transform: rotate(180deg);
 76: }
 77: .currify-style-dropdown-horizontal.switcher-open .currify-arrow {
 78:     transform: rotate(90deg);
 79: }
 80: 
 81: /* --- Dropdown List --- */
 82: .currify-style-dropdown-classic .currify-currency-list,
 83: .currify-style-dropdown-horizontal .currify-currency-list {
 84:     position: absolute;
 85:     top: calc(100% - 1px);
 86:     left: 0;
 87:     width: 100%;
 88:     background-color: #fff;
 89:     border: 1px solid var(--currify-primary-color);
 90:     border-radius: 0 0 6px 6px;
 91:     box-shadow: 0 8px 16px rgba(0,0,0,0.15);
 92:     overflow-y: auto;
 93:     max-height: 300px;
 94:     opacity: 0;
 95:     visibility: hidden;
 96:     transform: translateY(-8px);
 97:     transition: 
 98:         opacity 0.25s ease,
 99:         transform 0.25s ease,
100:         visibility 0.25s ease;
101: }
102: 
103: .currify-style-dropdown-classic.switcher-open .currify-currency-list,
104: .currify-style-dropdown-horizontal.switcher-open .currify-currency-list {
105:     opacity: 1;
106:     visibility: visible;
107:     transform: translateY(0);
108: }
109: 
110: .currify-style-dropdown-classic .currify-currency-list ul,
111: .currify-style-dropdown-horizontal .currify-currency-list ul {
112:     list-style: none;
113:     margin: 0;
114:     padding: 0;
115: }
116: 
117: .currify-style-dropdown-classic .currify-currency-link,
118: .currify-style-dropdown-horizontal .currify-currency-link {
119:     display: flex;
120:     align-items: center;
121:     gap: 8px;
122:     width: 100%;
123:     padding: 8px 12px;
124:     background: none;
125:     border: none;
126:     color: #333;
127:     font: inherit;
128:     cursor: pointer;
129:     text-align: left;
130:     transition: background-color 0.2s ease, color 0.2s ease;
131:     text-decoration: none;
132:     box-sizing: border-box;
133: }
134: 
135: .currify-style-dropdown-classic .currify-currency-link:hover,
136: .currify-style-dropdown-horizontal .currify-currency-link:hover {
137:     background-color: #f0f8ff;
138:     color: var(--currify-primary-color);
139: }
140: 
141: 
142: /* 
143: ==================================
144: Style 1.5: Horizontal Dropdown
145: ==================================
146: */
147: .currify-style-dropdown-horizontal.switcher-open .currify-active-currency {
148:     border-color: var(--currify-primary-color);
149:     box-shadow: 0 0 6px rgba(0,115,170,0.3);
150: }
151: .currify-style-dropdown-horizontal .currify-currency-list {
152:     border-top: 1px solid var(--currify-primary-color);
153:     border-radius: 6px;
154:     width: auto;
155:     min-width: 100%;
156:     max-width: 80vw;
157:     overflow-x: auto;
158:     overflow-y: hidden;
159: }
160: .currify-style-dropdown-horizontal .currify-currency-list ul {
161:     display: flex;
162:     padding: 4px;
163:     width: max-content;
164: }
165: .currify-style-dropdown-horizontal .currify-currency-link {
166:     border-radius: 4px;
167:     white-space: nowrap;
168: }
169: .currify-style-dropdown-horizontal .currify-currency-link.is-active {
170:     color: var(--currify-primary-color);
171:     font-weight: 600;
172:     background-color: #f0f8ff;
173: }
174: 
175: /* 
176: ==================================
177: Style 2: Horizontal Pills
178: ==================================
179: */
180: .currify-style-pills-horizontal .currify-pills-list {
181:     display: flex;
182:     align-items: center;
183:     gap: 4px;
184:     background-color: var(--currify-background-color);
185:     border-radius: 20px;
186:     padding: 4px;
187:     border: 1px solid #e0e0e0;
188: }
189: .currify-style-pills-horizontal .currify-pill-item {
190:     display: flex;
191:     align-items: center;
192:     gap: 6px;
193:     padding: 6px 12px;
194:     border-radius: 16px;
195:     text-decoration: none;
196:     color: #555;
197:     font-weight: 500;
198:     transition: all 0.25s ease-in-out;
199: }
200: .currify-style-pills-horizontal .currify-pill-item:hover {
201:     background-color: #e9e9e9;
202:     color: #111;
203: }
204: .currify-style-pills-horizontal .currify-pill-item.is-active {
205:     background-color: var(--currify-primary-color);
206:     color: #fff;
207:     box-shadow: 0 2px 4px rgba(0,0,0,0.1);
208: }
209: .currify-style-pills-horizontal .currify-pill-item.is-active:hover {
210:     background-color: var(--currify-primary-color);
211: }
212: 
213: 
214: /* 
215: ==================================
216: Style 3: Horizontal Flags Only
217: ==================================
218: */
219: .currify-style-flags-horizontal .currify-flags-list {
220:     display: flex;
221:     align-items: center;
222:     gap: 8px;
223: }
224: .currify-style-flags-horizontal .currify-flag-item {
225:     display: block;
226:     line-height: 0;
227:     border-radius: 4px;
228:     padding: 3px;
229:     border: 2px solid transparent;
230:     transition: all 0.2s ease;
231: }
232: .currify-style-flags-horizontal .currify-flag-item:hover {
233:     border-color: #e0e0e0;
234: }
235: .currify-style-flags-horizontal .currify-flag-item.is-active {
236:     border-color: var(--currify-primary-color);
237:     box-shadow: 0 0 8px rgba(0,115,170,0.4);
238: }
239: .currify-style-flags-horizontal .currify-flag-item img {
240:     border-radius: 2px;
241: }
242: 
243: 
244: /* 
245: ==================================
246: Style 4 & 5: Vertical & Horizontal Lists
247: ==================================
248: */
249: .currify-style-list-vertical .currify-list,
250: .currify-style-list-horizontal .currify-list {
251:     list-style: none;
252:     margin: 0;
253:     padding: 0;
254:     border: 1px solid #eee;
255:     border-radius: 4px;
256:     background-color: var(--currify-background-color);
257: }
258: .currify-style-list-horizontal .currify-list {
259:     display: flex;
260: }
261: .currify-style-list-vertical .currify-list li + li {
262:     border-top: 1px solid #eee;
263: }
264: .currify-style-list-horizontal .currify-list li + li {
265:     border-left: 1px solid #eee;
266: }
267: .currify-list-item {
268:     display: flex;
269:     align-items: center;
270:     gap: 8px;
271:     padding: 8px 12px;
272:     text-decoration: none;
273:     color: #555;
274:     transition: background-color 0.2s ease, color 0.2s ease;
275: }
276: .currify-list-item:hover {
277:     background-color: #f5f5f5;
278:     color: #111;
279: }
280: .currify-list-item.is-active {
281:     color: var(--currify-primary-color);
282:     font-weight: 600;
283:     background-color: #f0f8ff;
284: }
285: 
286: 
287: /* --- Scrollbar Styling --- */
288: .currify-currency-list::-webkit-scrollbar,
289: .currify-row-limit-view ::-webkit-scrollbar {
290:     width: 6px;
291:     height: 6px;
292: }
293: .currify-currency-list::-webkit-scrollbar-thumb,
294: .currify-row-limit-view ::-webkit-scrollbar-thumb {
295:     background-color: rgba(0,0,0,0.2);
296:     border-radius: 3px;
297: }
298: .currify-currency-list::-webkit-scrollbar-thumb:hover,
299: .currify-row-limit-view ::-webkit-scrollbar-thumb:hover {
300:     background-color: rgba(0,0,0,0.35);
301: }
302: 
303: /* --- SVG Symbol Styling --- */
304: .woocommerce-Price-currencySymbol svg {
305:     display: inline-block;
306:     vertical-align: middle;
307:     width: auto;
308:     height: 1em; 
309:     fill: currentColor; 
310:     shape-rendering: geometricPrecision;
311: }
312: 
313: /* --- Admin Bargain Field --- */
314: .currify-admin-bargain-wrapper {
315:     background-color: #fdfae8;
316:     border-left: 3px solid #f0b849;
317:     padding: 15px;
318:     margin-bottom: 1em;
319:     border-radius: 4px;
320: }
321: 
322: .currify-admin-bargain-wrapper label {
323:     font-weight: 600;
324:     display: block;
325:     margin-bottom: 6px;
326: }
327: 
328: /* --- Skeleton Loader --- */
329: .currify-price.currify-loading > * {
330:     visibility: hidden;
331: }
332: .currify-price.currify-loading {
333:     background-color: #eef1f2;
334:     color: transparent;
335:     border-radius: 4px;
336:     animation: currify-pulse 1.5s infinite ease-in-out;
337:     min-height: 1em;
338:     display: inline-block;
339:     min-width: 60px;
340: }
341: 
342: @keyframes currify-pulse {
343:     0% { background-color: #eef1f2; }
344:     50% { background-color: #e1e6e8; }
345:     100% { background-color: #eef1f2; }
346: }
347: 
348: /* Nav Menu Integration */
349: .currify-nav-menu-item {
350:     display: flex;
351:     align-items: center;
352: }
353: 
354: /* 
355: ==================================
356: Grid and Row Limit Modifications
357: ==================================
358: */
359: .currify-grid-view.currify-style-dropdown-classic .currify-currency-list ul,
360: .currify-grid-view.currify-style-pills-horizontal .currify-pills-list,
361: .currify-grid-view.currify-style-flags-horizontal .currify-flags-list,
362: .currify-grid-view.currify-style-list-horizontal .currify-list,
363: .currify-grid-view.currify-style-list-vertical .currify-list {
364:     display: grid;
365:     grid-template-columns: repeat(var(--currify-grid-columns, 1), 1fr);
366: }
367: .currify-grid-view.currify-style-dropdown-classic .currify-currency-list ul {
368:     gap: 4px;
369:     padding: 4px;
370: }
371: .currify-grid-view.currify-style-dropdown-classic .currify-currency-list {
372:     width: max-content;
373:     min-width: 100%;
374: }
375: .currify-grid-view.currify-style-dropdown-classic .currify-currency-link {
376:     justify-content: center;
377:     border-radius: 4px;
378: }
379: .currify-grid-view.currify-style-pills-horizontal .currify-pills-list {
380:     border-radius: 8px;
381:     width: 100%;
382: }
383: .currify-grid-view.currify-style-flags-horizontal .currify-flag-item {
384:     justify-self: center;
385: }
386: .currify-grid-view.currify-style-list-vertical .currify-list,
387: .currify-grid-view.currify-style-list-horizontal .currify-list {
388:     gap: 1px;
389:     background-color: #eee;
390: }
391: .currify-grid-view.currify-style-list-vertical .currify-list li,
392: .currify-grid-view.currify-style-list-horizontal .currify-list li {
393:     background-color: var(--currify-background-color);
394: }
395: .currify-grid-view.currify-style-list-vertical .currify-list li + li,
396: .currify-grid-view.currify-style-list-horizontal .currify-list li + li {
397:     border: none;
398: }
399: 
400: .currify-row-limit-view .currify-currency-list ul,
401: .currify-row-limit-view .currify-pills-list,
402: .currify-row-limit-view .currify-flags-list,
403: .currify-row-limit-view .currify-list {
404:     --currify-row-height: 40px; /* A reasonable default height for one item */
405:     max-height: calc(var(--currify-max-rows) * var(--currify-row-height));
406:     overflow-y: auto;
407:     overflow-x: hidden;
408: }

================
File: code_1/assets/images/symbols/aed.svg
================
1: <svg version="1.2" xmlns="http://www.w3.org/2000/svg" viewBox="0 -90 1000 1050" width="1000" height="870">
2: 	<title>Layer copy</title>
3: 	<style>
4: 		.s0 { fill: #000000 } 
5: 	</style>
6: 	<path id="Layer copy" class="s0" d="m88.3 1c0.4 0.6 2.6 3.3 4.7 5.9 15.3 18.2 26.8 47.8 33 85.1 4.1 24.5 4.3 32.2 4.3 125.6v87h-41.8c-38.2 0-42.6-0.2-50.1-1.7-11.8-2.5-24-9.2-32.2-17.8-6.5-6.9-6.3-7.3-5.9 13.6 0.5 17.3 0.7 19.2 3.2 28.6 4 14.9 9.5 26 17.8 35.9 11.3 13.6 22.8 21.2 39.2 26.3 3.5 1 10.9 1.4 37.1 1.6l32.7 0.5v43.3 43.4l-46.1-0.3-46.3-0.3-8-3.2c-9.5-3.8-13.8-6.6-23.1-14.9l-6.8-6.1 0.4 19.1c0.5 17.7 0.6 19.7 3.1 28.7 8.7 31.8 29.7 54.5 57.4 61.9 6.9 1.9 9.6 2 38.5 2.4l30.9 0.4v89.6c0 54.1-0.3 94-0.8 100.8-0.5 6.2-2.1 17.8-3.5 25.9-6.5 37.3-18.2 65.4-35 83.6l-3.4 3.7h169.1c101.1 0 176.7-0.4 187.8-0.9 19.5-1 63-5.3 72.8-7.4 3.1-0.6 8.9-1.5 12.7-2.1 8.1-1.2 21.5-4 40.8-8.9 27.2-6.8 52-15.3 76.3-26.1 7.6-3.4 29.4-14.5 35.2-18 3.1-1.8 6.8-4 8.2-4.7 3.9-2.1 10.4-6.3 19.9-13.1 4.7-3.4 9.4-6.7 10.4-7.4 4.2-2.8 18.7-14.9 25.3-21 25.1-23.1 46.1-48.8 62.4-76.3 2.3-4 5.3-9 6.6-11.1 3.3-5.6 16.9-33.6 18.2-37.8 0.6-1.9 1.4-3.9 1.8-4.3 2.6-3.4 17.6-50.6 19.4-60.9 0.6-3.3 0.9-3.8 3.4-4.3 1.6-0.3 24.9-0.3 51.8-0.1 53.8 0.4 53.8 0.4 65.7 5.9 6.7 3.1 8.7 4.5 16.1 11.2 9.7 8.7 8.8 10.1 8.2-11.7-0.4-12.8-0.9-20.7-1.8-23.9-3.4-12.3-4.2-14.9-7.2-21.1-9.8-21.4-26.2-36.7-47.2-44l-8.2-3-33.4-0.4-33.3-0.5 0.4-11.7c0.4-15.4 0.4-45.9-0.1-61.6l-0.4-12.6 44.6-0.2c38.2-0.2 45.3 0 49.5 1.1 12.6 3.5 21.1 8.3 31.5 17.8l5.8 5.4v-14.8c0-17.6-0.9-25.4-4.5-37-7.1-23.5-21.1-41-41.1-51.8-13-7-13.8-7.2-58.5-7.5-26.2-0.2-39.9-0.6-40.6-1.2-0.6-0.6-1.1-1.6-1.1-2.4 0-0.8-1.5-7.1-3.5-13.9-23.4-82.7-67.1-148.4-131-197.1-8.7-6.7-30-20.8-38.6-25.6-3.3-1.9-6.9-3.9-7.8-4.5-4.2-2.3-28.3-14.1-34.3-16.6-3.6-1.6-8.3-3.6-10.4-4.4-35.3-15.3-94.5-29.8-139.7-34.3-7.4-0.7-17.2-1.8-21.7-2.2-20.4-2.3-48.7-2.6-209.4-2.6-135.8 0-169.9 0.3-169.4 1zm330.7 43.3c33.8 2 54.6 4.6 78.9 10.5 74.2 17.6 126.4 54.8 164.3 117 3.5 5.8 18.3 36 20.5 42.1 10.5 28.3 15.6 45.1 20.1 67.3 1.1 5.4 2.6 12.6 3.3 16 0.7 3.3 1 6.4 0.7 6.7-0.5 0.4-100.9 0.6-223.3 0.5l-222.5-0.2-0.3-128.5c-0.1-70.6 0-129.3 0.3-130.4l0.4-1.9h71.1c39 0 78 0.4 86.5 0.9zm297.5 350.3c0.7 4.3 0.7 77.3 0 80.9l-0.6 2.7-227.5-0.2-227.4-0.3-0.2-42.4c-0.2-23.3 0-42.7 0.2-43.1 0.3-0.5 97.2-0.8 227.7-0.8h227.2zm-10.2 171.7c0.5 1.5-1.9 13.8-6.8 33.8-5.6 22.5-13.2 45.2-20.9 62-3.8 8.6-13.3 27.2-15.6 30.7-1.1 1.6-4.3 6.7-7.1 11.2-18 28.2-43.7 53.9-73 72.9-10.7 6.8-32.7 18.4-38.6 20.2-1.2 0.3-2.5 0.9-3 1.3-0.7 0.6-9.8 4-20.4 7.8-19.5 6.9-56.6 14.4-86.4 17.5-19.3 1.9-22.4 2-96.7 2h-76.9v-129.7-129.8l220.9-0.4c121.5-0.2 221.6-0.5 222.4-0.7 0.9-0.1 1.8 0.5 2.1 1.2z"/>
7: </svg>

================
File: code_1/assets/images/symbols/sar.svg
================
 1: <?xml version="1.0" encoding="UTF-8"?>
 2: <svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1124.14 1256.39">
 3:   <defs>
 4:     <style>
 5:       .cls-1 {
 6:         fill: #231f20;
 7:       }
 8:     </style>
 9:   </defs>
10:   <path class="cls-1" d="M699.62,1113.02h0c-20.06,44.48-33.32,92.75-38.4,143.37l424.51-90.24c20.06-44.47,33.31-92.75,38.4-143.37l-424.51,90.24Z"/>
11:   <path class="cls-1" d="M1085.73,895.8c20.06-44.47,33.32-92.75,38.4-143.37l-330.68,70.33v-135.2l292.27-62.11c20.06-44.47,33.32-92.75,38.4-143.37l-330.68,70.27V66.13c-50.67,28.45-95.67,66.32-132.25,110.99v403.35l-132.25,28.11V0c-50.67,28.44-95.67,66.32-132.25,110.99v525.69l-295.91,62.88c-20.06,44.47-33.33,92.75-38.42,143.37l334.33-71.05v170.26l-358.3,76.14c-20.06,44.47-33.32,92.75-38.4,143.37l375.04-79.7c30.53-6.35,56.77-24.4,73.83-49.24l68.78-101.97v-.02c7.14-10.55,11.3-23.27,11.3-36.97v-149.98l132.25-28.11v270.4l424.53-90.28Z"/>
12: </svg>

================
File: code_1/assets/js/admin.js
================
  1: jQuery(function ($) {
  2:     'use strict';
  3: 
  4:     const CurrifyAdmin = {
  5:         init: function () {
  6:             this.initDarkModeToggle();
  7:             this.initTabNavigation();
  8:             this.initSelect2();
  9:             this.initColorPickers();
 10:             this.initCurrencyManager();
 11:             this.initAppearanceManager();
 12:             this.initGeolocationManager();
 13:             this.initMediaUploader();
 14:             this.initCronControls();
 15:             this.initSortable();
 16:             this.initFormatEditor();
 17:             this.initDebugTools();
 18:             this.initFloatingSaveButton();
 19:         },
 20: 
 21:         initDarkModeToggle: function() {
 22:             const toggleButton = $('#currify-dark-mode-toggle');
 23:             const body = $('body');
 24:             const themeKey = 'currifyAdminTheme';
 25: 
 26:             const applyTheme = (theme) => {
 27:                 body.toggleClass('currify-dark-mode', theme === 'dark');
 28:             };
 29: 
 30:             applyTheme(localStorage.getItem(themeKey));
 31: 
 32:             toggleButton.on('click', function() {
 33:                 let newTheme = body.hasClass('currify-dark-mode') ? 'light' : 'dark';
 34:                 applyTheme(newTheme);
 35:                 localStorage.setItem(themeKey, newTheme);
 36:             });
 37:         },
 38: 
 39:         loadDebugData: function() {
 40:             const $container = $('#currify-debug-dynamic-content');
 41:             if ($container.data('loading')) {
 42:                 return; // Prevent multiple simultaneous loads
 43:             }
 44: 
 45:             $container.data('loading', true).html(`
 46:                 <div class="currify-debug-loader">
 47:                     <span class="spinner is-active"></span>
 48:                     <p>${'Loading latest saved data...'}</p>
 49:                 </div>
 50:             `);
 51: 
 52:             $.post(currify_admin.ajax_url, {
 53:                 action: 'currify_get_debug_info',
 54:                 nonce: currify_admin.nonce
 55:             }).done(response => {
 56:                 if (response.success) {
 57:                     $container.html(response.data.html);
 58:                 } else {
 59:                     throw new Error(response.data.message || 'Could not load debug info.');
 60:                 }
 61:             }).fail(err => {
 62:                  $container.html(`<div class="notice notice-error"><p><strong>Error:</strong> ${err.message || 'An unknown AJAX error occurred.'}</p></div>`);
 63:             }).always(() => {
 64:                 $container.data('loading', false);
 65:             });
 66:         },
 67: 
 68:         initTabNavigation: function() {
 69:             const $tabs = $('.nav-tab-wrapper a.nav-tab');
 70:             const self = this;
 71: 
 72:             $tabs.on('click', function(e) {
 73:                 e.preventDefault();
 74:                 const $this = $(this);
 75:                 const tabId = new URL(this.href).searchParams.get('tab');
 76:                 
 77:                 window.history.pushState({ path: this.href }, '', this.href);
 78: 
 79:                 $tabs.removeClass('nav-tab-active');
 80:                 $this.addClass('nav-tab-active');
 81: 
 82:                 $('.currify-tab-pane').removeClass('active');
 83:                 $('#tab-' + tabId).addClass('active');
 84:                 
 85:                 if (tabId === 'debug') {
 86:                     $('#currify-floating-save-container').addClass('hidden');
 87:                     self.loadDebugData(); // Load data when tab is clicked
 88:                 } else {
 89:                     $('#currify-floating-save-container').removeClass('hidden');
 90:                 }
 91:             });
 92: 
 93:             // Handle initial page load
 94:             const initialTabId = new URL(window.location.href).searchParams.get('tab');
 95:             if (initialTabId === 'debug') {
 96:                 self.loadDebugData();
 97:             }
 98:         },
 99:         
100:         initColorPickers: function() {
101:             $('.currify-color-picker').wpColorPicker();
102:         },
103: 
104:         initSelect2: function() {
105:             $('.currify-select2-countries, .currify-select2-currencies').each(function() {
106:                 const $select = $(this);
107:                 const placeholder = $select.hasClass('currify-select2-countries') ? 'Select countries...' : 'Select currencies...';
108:                 
109:                 let select2Options = {
110:                     width: '100%',
111:                     placeholder: placeholder,
112:                     allowClear: true,
113:                 };
114: 
115:                 if ($select.hasClass('currify-select2-countries') && $select.find('option').length === 0) {
116:                     const countries = Object.entries(currify_admin.countries).map(([code, name]) => ({
117:                         id: code,
118:                         text: name
119:                     }));
120:                     select2Options.data = countries;
121:                 }
122:                 
123:                 $select.select2(select2Options);
124:             });
125:         },
126:         
127:         initSortable: function() {
128:             $('#currency-rows-wrapper').sortable({
129:                 handle: '.currency-drag-handle',
130:                 items: '.currency-row:not(.base-currency-row)',
131:                 axis: 'y',
132:                 placeholder: 'currify-sortable-placeholder',
133:                 start: (event, ui) => ui.placeholder.height(ui.item.height()),
134:                 update: () => $('#currify-floating-submit').prop('disabled', false).removeClass('is-idle').addClass('is-dirty'),
135:             });
136:         },
137: 
138:         initCurrencyManager: function () {
139:             $('#add-currency-button').on('click', function () {
140:                 const newIndex = new Date().getTime();
141:                 let template = $('#currency-row-template').html().replace(/__INDEX__/g, newIndex);
142:                 $('#currency-rows-wrapper').append(template);
143:                 $('#currify-floating-submit').prop('disabled', false).removeClass('is-idle').addClass('is-dirty');
144:             });
145: 
146:             $('#currify-currencies-table').on('click', '.remove-currency-row', function (e) {
147:                 e.preventDefault();
148:                 $(this).closest('tr').remove();
149:                 $('#currify-floating-submit').prop('disabled', false).removeClass('is-idle').addClass('is-dirty');
150:             });
151:         },
152: 
153:         _renderPreviewFlag: function (flagUrl, code) {
154:             if (flagUrl) {
155:                 // Simple check if it's a URL or something else (like an emoji)
156:                 if (flagUrl.startsWith('http') || flagUrl.startsWith('/')) {
157:                     return `<img src="${flagUrl}" alt="${code}" class="currify-flag">`;
158:                 }
159:                 // It's not a URL, so treat it as text/emoji content
160:                 return `<span class="currify-flag currify-flag-emoji">${flagUrl}</span>`;
161:             }
162:             // Fallback if flagUrl is empty, using first 2 chars of code
163:             return `<span class="currify-flag currify-flag-emoji">${code.substring(0, 2)}</span>`;
164:         },
165:         
166:         initAppearanceManager: function() {
167:             const self = this;
168:             const $previewArea = $('.currify-appearance-preview-area');
169:             const $styleSelect = $('#currify_style_select');
170:             const $gridColumnsInput = $('#switcher_grid_columns');
171:             const $enableScrollingCheckbox = $('#switcher_enable_scrolling');
172:             const $visibleRowsInput = $('#switcher_visible_rows');
173:             const $visibleRowsWrapper = $('#switcher_visible_rows_wrapper');
174:         
175:             const toggleVisibleRows = () => {
176:                 $visibleRowsWrapper.toggle($enableScrollingCheckbox.is(':checked'));
177:             };
178:             
179:             const updatePreview = () => {
180:                 const selectedStyle = $styleSelect.val();
181:                 const columns = $gridColumnsInput.val();
182:                 const enableScrolling = $enableScrollingCheckbox.is(':checked');
183:                 const visibleRows = $visibleRowsInput.val();
184:                 const primaryColor = $('#switcher_primary_color').val();
185:                 const bgColor = $('#switcher_background_color').val();
186:         
187:                 const activePreviewType = $previewArea.find('.currify-preview-tabs .active').data('preview');
188:                 
189:                 $previewArea.find('.currify-preview-pane').hide();
190:                 const $activePane = $(`#currify-${activePreviewType}-preview-pane`).show();
191:                 
192:                 $activePane.find('.preview-wrapper').hide();
193:                 $activePane.find(`.preview-wrapper-${selectedStyle}`).show();
194:                 
195:                 let cssVars = {
196:                     '--currify-primary-color': primaryColor,
197:                     '--currify-background-color': bgColor
198:                 };
199:                 
200:                 let containerClasses = '';
201:                 if (parseInt(columns, 10) > 1) {
202:                     containerClasses += ' currify-grid-view';
203:                     cssVars['--currify-grid-columns'] = columns;
204:                 }
205:                 if (enableScrolling && parseInt(visibleRows, 10) > 0) {
206:                     containerClasses += ' currify-row-limit-view';
207:                     cssVars['--currify-max-rows'] = visibleRows;
208:                 }
209:         
210:                 $activePane.find('.currify-style-preview-box').css(cssVars);
211:                 $activePane.find('.currify-switcher-container').removeClass('currify-grid-view currify-row-limit-view').addClass(containerClasses);
212:             };
213:             
214:             const buildLivePreview = () => {
215:                 const currencies = currify_admin.saved_currencies;
216:                 const $pane = $('#currify-live-preview-pane');
217:                 
218:                 if (!currencies || currencies.length < 1) {
219:                     $pane.find('.currify-style-preview-box').html('<p>No currencies saved yet. Add currencies in the "Currencies" tab to see a live preview.</p>');
220:                     return;
221:                 }
222:                  
223:                 if ($pane.data('built')) {
224:                     return;
225:                 }
226:                 
227:                 Object.keys(self.previewRenderers).forEach(style => {
228:                     const html = self.previewRenderers[style].call(self, currencies);
229:                     $pane.find(`.preview-wrapper-${style}`).html(html);
230:                 });
231:                 $pane.data('built', true);
232:             };
233: 
234:             $('.currify-preview-tabs button').on('click', function() {
235:                 const $this = $(this);
236:                 $this.addClass('active').siblings().removeClass('active');
237:                 if ($this.data('preview') === 'live') {
238:                     buildLivePreview();
239:                 }
240:                 updatePreview();
241:             });
242: 
243:             // Event listeners for inputs
244:             $styleSelect.on('change', updatePreview);
245:             $gridColumnsInput.on('input', updatePreview);
246:             $enableScrollingCheckbox.on('change', () => {
247:                 toggleVisibleRows();
248:                 updatePreview();
249:             });
250:             $visibleRowsInput.on('input', updatePreview);
251: 
252:             $('.currify-color-picker').wpColorPicker({
253:                 change: () => setTimeout(updatePreview, 50),
254:                 clear: updatePreview
255:             });
256: 
257:             // Add interactivity to the dropdown previews
258:             $previewArea.on('click', '.preview-wrapper-dropdown-classic .currify-active-currency, .preview-wrapper-dropdown-horizontal .currify-active-currency', function(e) {
259:                 e.preventDefault();
260:                 $(this).closest('.currify-switcher-container').toggleClass('switcher-open');
261:             });
262:             
263:             // Conditional style selector for product page
264:             const toggleStyleSelector = () => {
265:                 const isDisabled = $('input[name="currify_settings[product_page_location]"]:checked').val() === 'disabled';
266:                 $('#product_page_style_selector_wrapper').css('opacity', isDisabled ? 0.5 : 1);
267:                 $('#product_page_switcher_style').prop('disabled', isDisabled);
268:             };
269:             $('input[name="currify_settings[product_page_location]"]').on('change', toggleStyleSelector);
270:             toggleStyleSelector();
271: 
272:             // Initial load
273:             toggleVisibleRows();
274:             updatePreview();
275:         },
276: 
277:         previewRenderers: {
278:             'dropdown-classic': function(currencies) {
279:                 if (!currencies || currencies.length === 0) return '';
280:                 const first = currencies[0];
281:                 const others = currencies.slice(1);
282:                 let othersHtml = others.map(c => `<li><a href="#" class="currify-currency-link">${this._renderPreviewFlag(c.flag, c.code)}<span>${c.code}</span></a></li>`).join('');
283: 
284:                 return `<div class="currify-switcher-container currify-style-dropdown-classic"><div class="currify-active-currency">${this._renderPreviewFlag(first.flag, first.code)}<span>${first.code}</span><span class="currify-arrow">&#9662;</span></div><div class="currify-currency-list"><ul>${othersHtml}</ul></div></div>`;
285:             },
286:             
287:             'dropdown-horizontal': function(currencies) {
288:                  if (!currencies || currencies.length === 0) return '';
289:                 const first = currencies[0];
290:                 let allHtml = currencies.map(c => `<li><a href="#" class="currify-currency-link ${c.code === first.code ? 'is-active' : ''}">${this._renderPreviewFlag(c.flag, c.code)}<span>${c.code}</span></a></li>`).join('');
291: 
292:                 return `<div class="currify-switcher-container currify-style-dropdown-horizontal"><div class="currify-active-currency">${this._renderPreviewFlag(first.flag, first.code)}<span>${first.code}</span><span class="currify-arrow">&#9656;</span></div><div class="currify-currency-list"><ul>${allHtml}</ul></div></div>`;
293:             },
294: 
295:             'pills-horizontal': function(currencies) {
296:                  if (!currencies || currencies.length === 0) return '';
297:                 const first = currencies[0];
298:                 let pillsHtml = currencies.map(c => `<a href="#" class="currify-pill-item ${c.code === first.code ? 'is-active' : ''}">${this._renderPreviewFlag(c.flag, c.code)}<span>${c.code}</span></a>`).join('');
299:                 return `<div class="currify-switcher-container currify-style-pills-horizontal"><div class="currify-pills-list">${pillsHtml}</div></div>`;
300:             },
301:             
302:             'flags-horizontal': function(currencies) {
303:                  if (!currencies || currencies.length === 0) return '';
304:                 const first = currencies[0];
305:                 let flagsHtml = currencies.map(c => `<a href="#" class="currify-flag-item ${c.code === first.code ? 'is-active' : ''}" title="${c.code}">${this._renderPreviewFlag(c.flag, c.code)}</a>`).join('');
306:                 return `<div class="currify-switcher-container currify-style-flags-horizontal"><div class="currify-flags-list">${flagsHtml}</div></div>`;
307:             },
308:             
309:             'list-vertical': function(currencies) {
310:                  if (!currencies || currencies.length === 0) return '';
311:                 const first = currencies[0];
312:                 let listHtml = currencies.map(c => `<li><a href="#" class="currify-list-item ${c.code === first.code ? 'is-active' : ''}">${this._renderPreviewFlag(c.flag, c.code)}<span>${c.code}</span></a></li>`).join('');
313:                 return `<div class="currify-switcher-container currify-style-list-vertical"><ul class="currify-list">${listHtml}</ul></div>`;
314:             },
315: 
316:             'list-horizontal': function(currencies) {
317:                  if (!currencies || currencies.length === 0) return '';
318:                 const first = currencies[0];
319:                 let listHtml = currencies.map(c => `<li><a href="#" class="currify-list-item ${c.code === first.code ? 'is-active' : ''}">${this._renderPreviewFlag(c.flag, c.code)}<span>${c.code}</span></a></li>`).join('');
320:                 return `<div class="currify-switcher-container currify-style-list-horizontal"><ul class="currify-list">${listHtml}</ul></div>`;
321:             },
322:         },
323: 
324:         initGeolocationManager: function() {
325:             $('#add-geolocation-rule-button').on('click', function () {
326:                 const newIndex = new Date().getTime();
327:                 let template = $('#geolocation-rule-template').html().replace(/__INDEX__/g, newIndex);
328:                 const $newRow = $(template);
329:                 $('#geolocation-rules-wrapper').append($newRow);
330:                 $newRow.find('.currify-select2-countries').select2({
331:                      width: '100%',
332:                      placeholder: 'Select countries...',
333:                      allowClear: true,
334:                      data: Object.entries(currify_admin.countries).map(([code, name]) => ({ id: code, text: name }))
335:                 });
336:                 $('#currify-floating-submit').prop('disabled', false).removeClass('is-idle').addClass('is-dirty');
337:             });
338: 
339:             $('#geolocation-rules-wrapper').on('click', '.remove-geolocation-rule', function (e) {
340:                 e.preventDefault();
341:                 $(this).closest('tr').remove();
342:                 $('#currify-floating-submit').prop('disabled', false).removeClass('is-idle').addClass('is-dirty');
343:             });
344:         },
345: 
346:         initMediaUploader: function () {
347:             $('#currify-currencies-table').on('click', '.flag-preview', function (e) {
348:                 e.preventDefault();
349:                 const $previewDiv = $(this);
350:                 const $urlInput = $previewDiv.siblings('.flag-url');
351:                 const $clearButton = $previewDiv.siblings('.clear-flag-button');
352:                 
353:                 const frame = wp.media({
354:                     title: 'Select or Upload Flag Image',
355:                     button: { text: 'Use this image' },
356:                     multiple: false
357:                 });
358: 
359:                 frame.on('select', function () {
360:                     const attachment = frame.state().get('selection').first().toJSON();
361:                     $urlInput.val(attachment.url).trigger('change');
362:                     $previewDiv.html(`<img src="${attachment.url}"/>`);
363:                     $clearButton.removeClass('hidden');
364:                 });
365:                 frame.open();
366:             });
367: 
368:             $('#currify-currencies-table').on('click', '.clear-flag-button', function(e) {
369:                 e.preventDefault();
370:                 const $button = $(this);
371:                 $button.siblings('.flag-url').val('').trigger('change');
372:                 $button.siblings('.flag-preview').html('');
373:                 $button.addClass('hidden');
374:             });
375:         },
376: 
377:         initFormatEditor: function() {
378:             $('#currify-currencies-table').on('change', '.format-position-select', function() {
379:                 const $editor = $(this).closest('tr').find('.currify-format-editor');
380:                 const position = $(this).val();
381:                 const positionClass = position.includes('left') ? 'left' : 'right';
382:                 $editor.removeClass('position-left position-right').addClass(`position-${positionClass}`);
383:             });
384:         
385:             $('#currify-currencies-table').on('keyup', 'input[name$="[symbol]"]', function() {
386:                 $(this).closest('tr').find('.preview-symbol').text($(this).val());
387:             });
388:         },
389:         
390:         initCronControls: function() {
391:             $('.currify-manual-update-trigger').on('click', function() {
392:                 const $button = $(this);
393:                 const $spinner = $button.siblings('.currify-update-spinner');
394:                 const $status = $button.siblings('.currify-update-status');
395:                 
396:                 $('.currify-manual-update-trigger').prop('disabled', true);
397:                 $spinner.css('visibility', 'visible');
398:                 $('.currify-update-status').text('').removeClass('error success');
399:                 $status.text('Fetching rates...');
400:                 
401:                 $.post(currify_admin.ajax_url, {
402:                     action: 'currify_manual_rate_update',
403:                     nonce: currify_admin.nonce
404:                 }).done(response => {
405:                     if (response.success) {
406:                         const rates = response.data;
407:                         let updatedCount = 0;
408: 
409:                         $('#currency-rows-wrapper .currency-row').each(function() {
410:                             const $row = $(this);
411:                             if ($row.find('select[name$="[rate_source]"]').val() === 'automatic') {
412:                                 const code = $row.find('input[name$="[code]"]').val().toUpperCase();
413:                                 if (rates[code]) {
414:                                     const $rateInput = $row.find('input[name$="[rate]"]');
415:                                     $rateInput.val(rates[code]).trigger('change');
416:                                     updatedCount++;
417:                                     $rateInput.css('background-color', '#dff0d8').animate({ backgroundColor: '' }, 2000);
418:                                 }
419:                             }
420:                         });
421:                         const msg = updatedCount > 0 ? `${updatedCount} rate(s) updated. A save is required.` : 'API call successful, but no matching currencies found to update.';
422:                         $('.currify-update-status').text(msg).addClass('success');
423:                     } else {
424:                         $status.text(`Error: ${response.data}`).addClass('error');
425:                     }
426:                 }).fail(() => {
427:                     $status.text('An unknown error occurred.').addClass('error');
428:                 }).always(() => {
429:                     $('.currify-manual-update-trigger').prop('disabled', false);
430:                     $('.currify-update-spinner').css('visibility', 'hidden');
431:                 });
432:             });
433:         },
434: 
435:         initDebugTools: function() {
436:             $(document).on('click', '.currify-debug-delete', e => {
437:                 if (!confirm('Are you sure you want to perform this action? This is destructive and cannot be undone.')) {
438:                     e.preventDefault();
439:                 }
440:             });
441:         },
442: 
443:         initFloatingSaveButton: function() {
444:             const $form = $('#currify-main-settings-form');
445:             const $saveButton = $('#currify-floating-submit');
446: 
447:             $saveButton.on('click', function(e) {
448:                 e.preventDefault();
449:                 const $icon = $saveButton.find('.currify-save-icon');
450:                 const $text = $saveButton.find('.currify-save-text');
451: 
452:                 $saveButton.prop('disabled', true).removeClass('is-dirty is-success').addClass('is-saving');
453:                 $icon.removeClass('dashicons-saved dashicons-yes-alt').addClass('dashicons-update-alt spin');
454:                 $text.text('Saving...');
455:                 
456:                 $.post(currify_admin.ajax_url, {
457:                     action: 'currify_save_settings',
458:                     form_data: $form.serialize(),
459:                     _wpnonce: $form.find('input[name="_wpnonce"]').val()
460:                 }).done(response => {
461:                     if (response.success) {
462:                         $saveButton.removeClass('is-saving').addClass('is-success');
463:                         $icon.removeClass('dashicons-update-alt spin').addClass('dashicons-yes-alt');
464:                         $text.text('Saved!');
465:                         // Refresh saved currencies for the live preview after a successful save
466:                         if (typeof response.data === 'object' && response.data.hasOwnProperty('currencies')) {
467:                            currify_admin.saved_currencies = response.data.currencies;
468:                            $('#currify-live-preview-pane').data('built', false); // Mark for rebuild
469:                         }
470:                         setTimeout(() => {
471:                             $saveButton.prop('disabled', false).removeClass('is-success').addClass('is-dirty');
472:                             $icon.removeClass('dashicons-yes-alt').addClass('dashicons-saved');
473:                             $text.text('Save');
474:                         }, 2000);
475:                     } else {
476:                         throw new Error(response.data || 'Could not save settings.');
477:                     }
478:                 }).fail(err => {
479:                     $saveButton.prop('disabled', false).removeClass('is-saving').addClass('is-dirty');
480:                     $icon.removeClass('dashicons-update-alt spin').addClass('dashicons-saved');
481:                     $text.text('Save');
482:                     alert(`Error: ${err.message || 'An unknown error occurred.'}`);
483:                 });
484:             });
485:         }
486:     };
487: 
488:     CurrifyAdmin.init();
489: });

================
File: code_1/assets/js/frontend.js
================
  1: jQuery(function ($) {
  2:     'use strict';
  3: 
  4:     const CurrifyFrontend = {
  5:         
  6:         init: function () {
  7:             this.initCustomDropdown();
  8:             this.convertPrices(); 
  9:             this.initEventListeners(); 
 10: 
 11:             if (currify_front.is_shop_manager) {
 12:                 this.initAdminBargain();
 13:             }
 14:         },
 15: 
 16:         debounce: function(func, delay) {
 17:             let timeout;
 18:             return function(...args) {
 19:                 clearTimeout(timeout);
 20:                 timeout = setTimeout(() => func.apply(this, args), delay);
 21:             };
 22:         },
 23: 
 24:         initEventListeners: function() {
 25:             const debouncedConvertPrices = this.debounce(this.convertPrices.bind(this), 150);
 26: 
 27:             const specificEvents = [
 28:                 'updated_wc_div',
 29:                 'append.infiniteScroll',
 30:                 'jet-filter-content-rendered',
 31:                 'berocket_ajax_products_loaded',
 32:                 'flatsome_infinite_scroll_append'
 33:             ].join(' ');
 34: 
 35:             $(document.body).on(specificEvents, debouncedConvertPrices);
 36: 
 37:             $(document).ajaxComplete(function(event, xhr, settings) {
 38:                 if (xhr.status === 200 && settings.type.toUpperCase() === 'GET') {
 39:                     const contentType = xhr.getResponseHeader("Content-Type");
 40:                     if (contentType && contentType.indexOf("text/html") > -1) {
 41:                          debouncedConvertPrices();
 42:                     }
 43:                 }
 44:             });
 45:         },
 46:         
 47:         convertPrices: function() {
 48:             if ($('body').hasClass('woocommerce-cart') || $('body').hasClass('woocommerce-checkout')) {
 49:                 return;
 50:             }
 51:             
 52:             // Use localized data instead of cookies for better reliability
 53:             const targetCurrencyCode = currify_front.current_currency || currify_front.base_currency;
 54: 
 55:             if (targetCurrencyCode === currify_front.base_currency) {
 56:                  $('.currify-price:not(.currify-processed)').addClass('currify-processed');
 57:                 return;
 58:             }
 59: 
 60:             const currencyData = currify_front.currencies[targetCurrencyCode];
 61:             if (!currencyData) {
 62:                 console.error(`Currify: Data for currency "${targetCurrencyCode}" not found.`);
 63:                 return;
 64:             }
 65: 
 66:             const self = this;
 67:             $('.currify-price:not(.currify-processed)').each(function() {
 68:                 const $el = $(this);
 69:                 const basePrice = parseFloat($el.data('price'));
 70:                 
 71:                 $el.addClass('currify-processed'); 
 72: 
 73:                 if (isNaN(basePrice)) {
 74:                     return; 
 75:                 }
 76: 
 77:                 $el.addClass('currify-loading');
 78: 
 79:                 const rate = parseFloat(currencyData.rate);
 80:                 const convertedPrice = basePrice * rate;
 81:                 const formattedPrice = self.formatPrice(convertedPrice, currencyData);
 82:                 
 83:                 setTimeout(() => {
 84:                     $el.html(formattedPrice)
 85:                        .removeClass('currify-loading');
 86:                 }, 150);
 87:             });
 88:         },
 89: 
 90:         formatPrice: function(price, currencyData) {
 91:             const parsedDecimals = parseInt(currencyData.decimals, 10);
 92:             const decimals = !isNaN(parsedDecimals) ? parsedDecimals : 2;
 93:             const decPoint = currencyData.decimal_sep || '.';
 94:             const thousandsSep = currencyData.thousand_sep || ',';
 95:             const symbol = currencyData.symbol_svg || currencyData.symbol || '$';
 96:             const position = currencyData.symbol_pos || 'left';
 97:             
 98:             let number = price.toFixed(decimals);
 99:             let parts = number.split('.');
100:             parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, thousandsSep);
101:             const formattedNumber = parts.join(decPoint);
102: 
103:             let priceString;
104:             switch(position) {
105:                 case 'left':
106:                     priceString = `<span class="woocommerce-Price-currencySymbol">${symbol}</span>${formattedNumber}`;
107:                     break;
108:                 case 'left_space':
109:                     priceString = `<span class="woocommerce-Price-currencySymbol">${symbol}</span>&nbsp;${formattedNumber}`;
110:                     break;
111:                 case 'right':
112:                     priceString = `${formattedNumber}<span class="woocommerce-Price-currencySymbol">${symbol}</span>`;
113:                     break;
114:                 case 'right_space':
115:                     priceString = `${formattedNumber}&nbsp;<span class="woocommerce-Price-currencySymbol">${symbol}</span>`;
116:                     break;
117:                 default:
118:                     priceString = `<span class="woocommerce-Price-currencySymbol">${symbol}</span>${formattedNumber}`;
119:             }
120: 
121:             return `<span class="woocommerce-Price-amount amount"><bdi>${priceString}</bdi></span>`;
122:         },
123:         
124:         initCustomDropdown: function () {
125:             $(document).on('click', '.currify-active-currency', function (e) {
126:                 e.stopPropagation();
127:                 $(this).closest('.currify-switcher-container').toggleClass('switcher-open');
128:             });
129:             
130:             $(document).on('click', '.currify-currency-link', function (e) {
131:                 $(this).closest('.currify-switcher-container').removeClass('switcher-open');
132:             });
133: 
134:             $(document).on('click', function (e) {
135:                 const switcherContainer = $('.currify-switcher-container');
136:                 if (switcherContainer.hasClass('switcher-open') && !$(e.target).closest('.currify-switcher-container').length) {
137:                     switcherContainer.removeClass('switcher-open');
138:                 }
139:             });
140:         },
141:         
142:         initAdminBargain: function () {
143:             const bargainInput = $('#currify-bargain-price');
144:             const bargainHiddenInput = $('#currify-bargain-base-price');
145: 
146:             if (!bargainInput.length) {
147:                 return;
148:             }
149: 
150:             const targetCurrencyCode = currify_front.current_currency || currify_front.base_currency;
151:             const currencyData = currify_front.currencies[targetCurrencyCode];
152: 
153:             $(document).on('keyup change', '#currify-bargain-price', function () {
154:                 const userInputPrice = parseFloat($(this).val());
155:                 if (isNaN(userInputPrice) || userInputPrice < 0) {
156:                     bargainHiddenInput.val('');
157:                     return;
158:                 }
159: 
160:                 if (!currencyData) return;
161: 
162:                 const currentRate = parseFloat(currencyData.rate);
163:                 if (isNaN(currentRate) || currentRate <= 0) {
164:                     return;
165:                 }
166:                 
167:                 const basePrice = userInputPrice / currentRate;
168:                 bargainHiddenInput.val(basePrice.toFixed(6));
169:             });
170:             
171:             $('form.cart').on('submit', function() {
172:                  if (bargainInput.val() && bargainHiddenInput.val()) {
173:                      if ($(this).find('input[name="currify_bargain_currency"]').length === 0) {
174:                         $(this).append('<input type="hidden" name="currify_bargain_currency" value="' + targetCurrencyCode + '" />');
175:                      }
176:                  }
177:             });
178:         },
179:     };
180: 
181:     CurrifyFrontend.init();
182: });

================
File: code_1/includes/class-admin-appearance.txt
================
  1: <?php
  2: 
  3: if ( ! defined( 'ABSPATH' ) ) {
  4:     exit; // Exit if accessed directly.
  5: }
  6: 
  7: class Currify_Admin_Appearance {
  8: 
  9:     private $options;
 10: 
 11:     public function __construct() {
 12:         $this->options = get_option('currify_settings');
 13:     }
 14: 
 15:     /**
 16:      * Register all settings fields for the Appearance tab.
 17:      */
 18:     public function register_settings() {
 19:         // Styling Section
 20:         add_settings_section( 'currify_setting_section_appearance_style', __( 'Styling & Preview', 'currify-currency-switcher' ), null, 'currify-admin-appearance' );
 21:         add_settings_field('switcher_style', __( 'Default Switcher Style', 'currify-currency-switcher' ), array( $this, 'switcher_style_callback' ), 'currify-admin-appearance', 'currify_setting_section_appearance_style');
 22:         add_settings_field('switcher_colors', __( 'Custom Colors', 'currify-currency-switcher' ), array( $this, 'switcher_colors_callback' ), 'currify-admin-appearance', 'currify_setting_section_appearance_style');
 23:         add_settings_field('switcher_layout_controls', __( 'Layout Controls', 'currify-currency-switcher' ), array( $this, 'switcher_layout_controls_callback' ), 'currify-admin-appearance', 'currify_setting_section_appearance_style');
 24: 
 25:         // Display Locations Section
 26:         add_settings_section( 'currify_setting_section_appearance_locations', __( 'Automatic Display Locations', 'currify-currency-switcher' ), null, 'currify-admin-appearance' );
 27:         add_settings_field('global_display_locations', __( 'Global Locations', 'currify-currency-switcher' ), array( $this, 'global_display_locations_callback' ), 'currify-admin-appearance', 'currify_setting_section_appearance_locations');
 28:         add_settings_field('product_page_location', __( 'Single Product Page Location', 'currify-currency-switcher' ), array( $this, 'product_page_location_callback' ), 'currify-admin-appearance', 'currify_setting_section_appearance_locations');
 29:         add_settings_field('product_page_switcher_style', __( 'Single Product Page Style', 'currify-currency-switcher' ), array( $this, 'product_page_switcher_style_callback' ), 'currify-admin-appearance', 'currify_setting_section_appearance_locations');
 30:     }
 31: 
 32:     /**
 33:      * Render the entire content for the Appearance tab.
 34:      */
 35:     public function render_tab_content() {
 36:         ?>
 37:         <div class="postbox">
 38:             <div class="postbox-header"><h2><?php esc_html_e( 'Switcher Appearance', 'currify-currency-switcher' ); ?></h2></div>
 39:             <div class="inside">
 40:                 <div class="currify-appearance-grid">
 41:                     <div class="currify-appearance-options">
 42:                         <table class="form-table">
 43:                             <?php do_settings_fields( 'currify-admin-appearance', 'currify_setting_section_appearance_style' ); ?>
 44:                         </table>
 45:                     </div>
 46:                     <div class="currify-appearance-preview-area">
 47:                         <?php $this->render_live_preview_box(); ?>
 48:                     </div>
 49:                 </div>
 50:             </div>
 51:         </div>
 52:         <div class="postbox">
 53:             <div class="postbox-header"><h2><?php esc_html_e( 'Display Locations', 'currify-currency-switcher' ); ?></h2></div>
 54:             <div class="inside">
 55:                  <p class="description"><?php esc_html_e('Automatically insert the currency switcher into common theme locations. You can also always use the [currify_currency_switcher] shortcode or the "Currify Switcher" widget manually.', 'currify-currency-switcher'); ?></p>
 56:                 <table class="form-table">
 57:                     <?php do_settings_fields( 'currify-admin-appearance', 'currify_setting_section_appearance_locations' ); ?>
 58:                 </table>
 59:             </div>
 60:         </div>
 61:         <?php
 62:     }
 63: 
 64:     private function render_flag_html($flag_data, $code) {
 65:         if (filter_var($flag_data, FILTER_VALIDATE_URL)) {
 66:             return '<img src="' . esc_url($flag_data) . '" alt="' . esc_attr($code) . '" class="currify-flag">';
 67:         }
 68:         // Fallback for emojis or empty flags
 69:         return '<span class="currify-flag currify-flag-emoji">' . esc_html($flag_data ?: mb_substr($code, 0, 2)) . '</span>';
 70:     }
 71: 
 72:     public function render_live_preview_box() {
 73:         $default_currencies = [
 74:             'USD' => ['code' => 'USD', 'flag' => '🇺🇸'],
 75:             'EUR' => ['code' => 'EUR', 'flag' => '🇪🇺'],
 76:             'GBP' => ['code' => 'GBP', 'flag' => '🇬🇧'],
 77:         ];
 78:         $first_currency = $default_currencies['USD'];
 79:         $other_currencies = ['EUR' => $default_currencies['EUR'], 'GBP' => $default_currencies['GBP']];
 80:         ?>
 81:         <div id="currify-style-preview">
 82:             <div class="currify-preview-header">
 83:                 <h4><?php esc_html_e('Interactive Live Preview', 'currify-currency-switcher'); ?></h4>
 84:                 <div class="currify-preview-tabs">
 85:                     <button type="button" class="active" data-preview="default"><?php esc_html_e('Default Preview', 'currify-currency-switcher'); ?></button>
 86:                     <button type="button" data-preview="live"><?php esc_html_e('Live Preview (Your Currencies)', 'currify-currency-switcher'); ?></button>
 87:                 </div>
 88:             </div>
 89:             
 90:             <div id="currify-default-preview-pane" class="currify-preview-pane active">
 91:                 <div class="currify-style-preview-box">
 92:                     <?php $this->render_all_preview_styles($first_currency, $other_currencies); ?>
 93:                 </div>
 94:             </div>
 95:              <div id="currify-live-preview-pane" class="currify-preview-pane">
 96:                 <div class="currify-style-preview-box">
 97:                     <?php $this->render_preview_wrappers(); ?>
 98:                 </div>
 99:             </div>
100: 
101:         </div>
102:         <?php
103:     }
104: 
105:     private function render_preview_wrappers() {
106:         $styles = ['dropdown-classic', 'dropdown-horizontal', 'pills-horizontal', 'flags-horizontal', 'list-vertical', 'list-horizontal'];
107:         foreach ($styles as $style) {
108:             echo '<div class="preview-wrapper preview-wrapper-' . esc_attr($style) . '"></div>';
109:         }
110:     }
111: 
112:     private function render_all_preview_styles($first_currency, $other_currencies) {
113:         // Combine for styles that need all currencies at once
114:         $all_currencies = array_merge([$first_currency], $other_currencies);
115:         ?>
116:         <!-- Dropdown Preview -->
117:         <div class="preview-wrapper preview-wrapper-dropdown-classic">
118:             <div class="currify-switcher-container currify-style-dropdown-classic">
119:                 <div class="currify-active-currency">
120:                     <?php echo $this->render_flag_html($first_currency['flag'], $first_currency['code']); ?>
121:                     <span><?php echo esc_html($first_currency['code']); ?></span>
122:                     <span class="currify-arrow">&#9662;</span>
123:                 </div>
124:                 <div class="currify-currency-list">
125:                     <ul>
126:                         <?php foreach($other_currencies as $currency): ?>
127:                         <li><a href="#" class="currify-currency-link"><?php echo $this->render_flag_html($currency['flag'], $currency['code']); ?><span><?php echo esc_html($currency['code']); ?></span></a></li>
128:                         <?php endforeach; ?>
129:                     </ul>
130:                 </div>
131:             </div>
132:         </div>
133: 
134:         <!-- Horizontal Dropdown Preview -->
135:         <div class="preview-wrapper preview-wrapper-dropdown-horizontal">
136:             <div class="currify-switcher-container currify-style-dropdown-horizontal">
137:                 <div class="currify-active-currency">
138:                     <?php echo $this->render_flag_html($first_currency['flag'], $first_currency['code']); ?>
139:                     <span><?php echo esc_html($first_currency['code']); ?></span>
140:                     <span class="currify-arrow">&#9656;</span>
141:                 </div>
142:                 <div class="currify-currency-list">
143:                     <ul>
144:                         <?php foreach($all_currencies as $currency): ?>
145:                         <li><a href="#" class="currify-currency-link <?php echo ($currency['code'] === $first_currency['code']) ? 'is-active' : ''; ?>"><?php echo $this->render_flag_html($currency['flag'], $currency['code']); ?><span><?php echo esc_html($currency['code']); ?></span></a></li>
146:                         <?php endforeach; ?>
147:                     </ul>
148:                 </div>
149:             </div>
150:         </div>
151:         
152:         <!-- Pills Preview -->
153:         <div class="preview-wrapper preview-wrapper-pills-horizontal">
154:             <div class="currify-switcher-container currify-style-pills-horizontal">
155:                 <div class="currify-pills-list">
156:                     <?php foreach($all_currencies as $currency): ?>
157:                     <a href="#" class="currify-pill-item <?php echo ($currency['code'] === $first_currency['code']) ? 'is-active' : ''; ?>"><?php echo $this->render_flag_html($currency['flag'], $currency['code']); ?><span><?php echo esc_html($currency['code']); ?></span></a>
158:                     <?php endforeach; ?>
159:                 </div>
160:             </div>
161:         </div>
162: 
163:         <!-- Flags Preview -->
164:          <div class="preview-wrapper preview-wrapper-flags-horizontal">
165:             <div class="currify-switcher-container currify-style-flags-horizontal">
166:                 <div class="currify-flags-list">
167:                     <?php foreach($all_currencies as $currency): ?>
168:                      <a href="#" class="currify-flag-item <?php echo ($currency['code'] === $first_currency['code']) ? 'is-active' : ''; ?>" title="<?php echo esc_attr($currency['code']); ?>"><?php echo $this->render_flag_html($currency['flag'], $currency['code']); ?></a>
169:                      <?php endforeach; ?>
170:                 </div>
171:             </div>
172:         </div>
173: 
174:         <!-- Vertical List Preview -->
175:         <div class="preview-wrapper preview-wrapper-list-vertical">
176:             <div class="currify-switcher-container currify-style-list-vertical">
177:                  <ul class="currify-list">
178:                     <?php foreach($all_currencies as $currency): ?>
179:                     <li><a href="#" class="currify-list-item <?php echo ($currency['code'] === $first_currency['code']) ? 'is-active' : ''; ?>"><?php echo $this->render_flag_html($currency['flag'], $currency['code']); ?><span><?php echo esc_html($currency['code']); ?></span></a></li>
180:                     <?php endforeach; ?>
181:                 </ul>
182:             </div>
183:         </div>
184: 
185:          <!-- Horizontal List Preview -->
186:         <div class="preview-wrapper preview-wrapper-list-horizontal">
187:             <div class="currify-switcher-container currify-style-list-horizontal">
188:                  <ul class="currify-list">
189:                      <?php foreach($all_currencies as $currency): ?>
190:                     <li><a href="#" class="currify-list-item <?php echo ($currency['code'] === $first_currency['code']) ? 'is-active' : ''; ?>"><?php echo $this->render_flag_html($currency['flag'], $currency['code']); ?><span><?php echo esc_html($currency['code']); ?></span></a></li>
191:                     <?php endforeach; ?>
192:                 </ul>
193:             </div>
194:         </div>
195:         <?php
196:     }
197: 
198: 
199:     /**
200:      * Callback for the switcher style selector dropdown.
201:      */
202:     public function switcher_style_callback() {
203:         $current_style = $this->options['switcher_style'] ?? 'dropdown-classic';
204:         $styles = [
205:             'dropdown-classic' => __('Classic Dropdown (Vertical)', 'currify-currency-switcher'),
206:             'dropdown-horizontal' => __('Dropdown (Horizontal)', 'currify-currency-switcher'),
207:             'pills-horizontal' => __('Horizontal Pills', 'currify-currency-switcher'),
208:             'flags-horizontal' => __('Horizontal Flags Only', 'currify-currency-switcher'),
209:             'list-vertical' => __('Vertical List', 'currify-currency-switcher'),
210:             'list-horizontal' => __('Horizontal List', 'currify-currency-switcher'),
211:         ];
212:         
213:         echo '<select id="currify_style_select" name="currify_settings[switcher_style]">';
214:         foreach ($styles as $key => $label) {
215:             echo '<option value="' . esc_attr($key) . '" ' . selected($current_style, $key, false) . '>' . esc_html($label) . '</option>';
216:         }
217:         echo '</select>';
218:         echo '<p class="description">' . esc_html__('Select the default visual style for the currency switcher (used for widgets, shortcodes, and global locations).', 'currify-currency-switcher') . '</p>';
219:     }
220:     
221:     /**
222:      * Callback for the custom color pickers.
223:      */
224:     public function switcher_colors_callback() {
225:         $primary_color = $this->options['switcher_primary_color'] ?? '#0073aa';
226:         $bg_color = $this->options['switcher_background_color'] ?? '#fafafa';
227:         ?>
228:         <p>
229:             <label for="switcher_primary_color" style="display:block; margin-bottom: 5px;"><?php esc_html_e('Primary Color', 'currify-currency-switcher'); ?></label>
230:             <input type="text" id="switcher_primary_color" name="currify_settings[switcher_primary_color]" value="<?php echo esc_attr($primary_color); ?>" class="currify-color-picker" data-default-color="#0073aa">
231:             <span class="description"><?php esc_html_e('Used for active states, borders, and highlights.', 'currify-currency-switcher'); ?></span>
232:         </p>
233:         <p style="margin-top: 15px;">
234:             <label for="switcher_background_color" style="display:block; margin-bottom: 5px;"><?php esc_html_e('Background Color', 'currify-currency-switcher'); ?></label>
235:             <input type="text" id="switcher_background_color" name="currify_settings[switcher_background_color]" value="<?php echo esc_attr($bg_color); ?>" class="currify-color-picker" data-default-color="#fafafa">
236:             <span class="description"><?php esc_html_e('Used for the background of dropdowns and pills.', 'currify-currency-switcher'); ?></span>
237:         </p>
238:         <?php
239:     }
240: 
241:     /**
242:      * Callback for the grid layout controls (rows and columns).
243:      */
244:     public function switcher_layout_controls_callback() {
245:         $columns = $this->options['switcher_grid_columns'] ?? 1;
246:         $enable_scrolling = $this->options['switcher_enable_scrolling'] ?? false;
247:         $visible_rows = $this->options['switcher_visible_rows'] ?? 5;
248:         ?>
249:         <div class="currify-layout-controls">
250:             <div class="currify-layout-control-item">
251:                 <label for="switcher_grid_columns"><?php esc_html_e('Grid Columns', 'currify-currency-switcher'); ?></label>
252:                 <input type="number" id="switcher_grid_columns" name="currify_settings[switcher_grid_columns]" value="<?php echo esc_attr($columns); ?>" min="1" max="10" style="width: 80px;" />
253:                 <p class="description"><?php esc_html_e('Split the list into a grid. Set to 1 for a single column list.', 'currify-currency-switcher'); ?></p>
254:             </div>
255:             <div class="currify-layout-control-item">
256:                  <label>
257:                     <input type="checkbox" id="switcher_enable_scrolling" name="currify_settings[switcher_enable_scrolling]" value="1" <?php checked($enable_scrolling, '1'); ?> />
258:                     <?php esc_html_e('Enable Scrolling', 'currify-currency-switcher'); ?>
259:                 </label>
260:                  <p class="description"><?php esc_html_e('Limit the height of the switcher and make it scrollable.', 'currify-currency-switcher'); ?></p>
261:             </div>
262:             <div class="currify-layout-control-item" id="switcher_visible_rows_wrapper">
263:                 <label for="switcher_visible_rows"><?php esc_html_e('Visible Rows', 'currify-currency-switcher'); ?></label>
264:                 <input type="number" id="switcher_visible_rows" name="currify_settings[switcher_visible_rows]" value="<?php echo esc_attr($visible_rows); ?>" min="1" max="20" style="width: 80px;" />
265:                 <p class="description"><?php esc_html_e('Number of rows to show before scrolling begins.', 'currify-currency-switcher'); ?></p>
266:             </div>
267:         </div>
268:         <?php
269:     }
270: 
271: 
272:     /**
273:      * Callback for the global display location checkboxes.
274:      */
275:     public function global_display_locations_callback() {
276:         $locations = $this->options['global_display_locations'] ?? [];
277:         $options = [
278:             'main_nav' => __('Main Navigation Menu', 'currify-currency-switcher'),
279:             'shop_loop' => __('Above Shop/Category Products', 'currify-currency-switcher'),
280:         ];
281:         
282:         foreach ($options as $key => $label) {
283:             $checked = isset($locations[$key]) ? 'checked' : '';
284:             echo '<p><label><input type="checkbox" name="currify_settings[global_display_locations]['.esc_attr($key).']" value="1" '.$checked.'> '.esc_html($label).'</label></p>';
285:         }
286:     }
287: 
288:     /**
289:      * Callback for the single product page location radio buttons.
290:      */
291:     public function product_page_location_callback() {
292:         $current_location = $this->options['product_page_location'] ?? 'disabled';
293:         $locations = [
294:             'disabled' => __('Do not display automatically', 'currify-currency-switcher'),
295:             'before_title' => __('Before product title', 'currify-currency-switcher'),
296:             'after_title' => __('After product title', 'currify-currency-switcher'),
297:             'after_price' => __('After product price', 'currify-currency-switcher'),
298:             'after_add_to_cart' => __('After "Add to Cart" button', 'currify-currency-switcher'),
299:         ];
300: 
301:         foreach ($locations as $key => $label) {
302:             echo '<p><label><input type="radio" name="currify_settings[product_page_location]" value="'.esc_attr($key).'" '.checked($current_location, $key, false).'> '.esc_html($label).'</label></p>';
303:         }
304:     }
305: 
306:     /**
307:      * Callback for the single product page style selector dropdown.
308:      */
309:     public function product_page_switcher_style_callback() {
310:         $current_style = $this->options['product_page_switcher_style'] ?? 'default';
311:         $styles = [
312:             'default' => __('Use Default Style', 'currify-currency-switcher'),
313:             'dropdown-classic' => __('Classic Dropdown (Vertical)', 'currify-currency-switcher'),
314:             'dropdown-horizontal' => __('Dropdown (Horizontal)', 'currify-currency-switcher'),
315:             'pills-horizontal' => __('Horizontal Pills', 'currify-currency-switcher'),
316:             'flags-horizontal' => __('Horizontal Flags Only', 'currify-currency-switcher'),
317:             'list-vertical' => __('Vertical List', 'currify-currency-switcher'),
318:             'list-horizontal' => __('Horizontal List', 'currify-currency-switcher'),
319:         ];
320: 
321:         echo '<div id="product_page_style_selector_wrapper">';
322:         echo '<select id="product_page_switcher_style" name="currify_settings[product_page_switcher_style]">';
323:         foreach ($styles as $key => $label) {
324:             echo '<option value="' . esc_attr($key) . '" ' . selected($current_style, $key, false) . '>' . esc_html($label) . '</option>';
325:         }
326:         echo '</select>';
327:         echo '<p class="description">' . esc_html__('Select a specific style for the switcher on single product pages. Choose "Use Default Style" to use the default style selected above.', 'currify-currency-switcher') . '</p>';
328:         echo '</div>';
329:     }
330: }
331: ?>

================
File: code_1/includes/class-admin-debug.txt
================
  1: <?php
  2: 
  3: if ( ! defined( 'ABSPATH' ) ) {
  4:     exit; // Exit if accessed directly.
  5: }
  6: 
  7: class Currify_Admin_Debug {
  8: 
  9:     public function __construct() {
 10:         add_action( 'admin_init', array( $this, 'handle_debug_actions' ) );
 11:         add_action( 'wp_ajax_currify_get_debug_info', array( $this, 'get_debug_info_ajax' ) );
 12:     }
 13:     
 14:     /**
 15:      * AJAX handler to fetch and return the latest debug info as HTML.
 16:      */
 17:     public function get_debug_info_ajax() {
 18:         check_ajax_referer('currify-admin-nonce', 'nonce');
 19:         if (!current_user_can('manage_options')) {
 20:             wp_send_json_error(['message' => 'Permission denied.']);
 21:         }
 22:         
 23:         ob_start();
 24:         $this->render_debug_info();
 25:         $html = ob_get_clean();
 26: 
 27:         wp_send_json_success(['html' => $html]);
 28:     }
 29:     
 30:     /**
 31:      * Renders the HTML for the dynamic debug information.
 32:      */
 33:     private function render_debug_info() {
 34:         echo '<h3>' . esc_html__('Saved Plugin Options', 'currify-currency-switcher') . '</h3>';
 35:         echo '<p class="description">' . esc_html__('This is the raw data stored in the `wp_options` table for the main plugin settings (`currify_settings`).', 'currify-currency-switcher') . '</p>';
 36:         echo '<pre class="currify-debug-pre">';
 37:         echo htmlspecialchars(print_r(get_option('currify_settings'), true));
 38:         echo '</pre>';
 39: 
 40:         $last_run = get_option('currify_last_cron_run_success');
 41:         echo '<h4>' . esc_html__('Last Cron Run Timestamp (`currify_last_cron_run_success`):', 'currify-currency-switcher') . '</h4>';
 42:         if ($last_run) {
 43:             echo '<p>' . esc_html($last_run) . ' (Local Time: ' . esc_html(get_date_from_gmt(date('Y-m-d H:i:s', $last_run))) . ')</p>';
 44:         } else {
 45:             echo '<p>' . esc_html__('Not run yet.', 'currify-currency-switcher') . '</p>';
 46:         }
 47:     }
 48: 
 49:     /**
 50:      * Renders the content for the debug and data management tab.
 51:      */
 52:     public function render_debug_page_content() {
 53:         // Display feedback message from debug actions.
 54:         if ( isset( $_GET['currify-notice'] ) && $_GET['currify-notice'] === 'data-cleared' ) {
 55:             echo '<div class="notice notice-success is-dismissible" style="margin-top: 20px;"><p>' . esc_html__( 'Selected data has been cleared.', 'currify-currency-switcher' ) . '</p></div>';
 56:         }
 57:         ?>
 58:         <!-- Debug Section Postbox -->
 59:         <div class="postbox" style="margin-top: 20px;">
 60:             <div class="postbox-header">
 61:                 <h2><?php esc_html_e( 'Debugging & Data Management', 'currify-currency-switcher' ); ?></h2>
 62:             </div>
 63:             <div class="inside">
 64:                 
 65:                 <div id="currify-debug-dynamic-content">
 66:                     <!-- This content will be loaded via AJAX -->
 67:                     <div class="currify-debug-loader">
 68:                         <span class="spinner is-active"></span>
 69:                         <p><?php esc_html_e('Loading latest saved data...', 'currify-currency-switcher'); ?></p>
 70:                     </div>
 71:                 </div>
 72:                 
 73:                 <hr>
 74:                 <h3><?php esc_html_e( 'Data Reset Tools', 'currify-currency-switcher' ); ?></h3>
 75:                 <p class="description" style="color: #d63638; font-weight: bold;"><?php esc_html_e( 'WARNING: These actions are destructive and cannot be undone. Use with caution.', 'currify-currency-switcher' ); ?></p>
 76:                 <form method="post" action="">
 77:                     <?php wp_nonce_field( 'currify_debug_actions_nonce' ); ?>
 78:                     <table class="form-table">
 79:                         <tr valign="top">
 80:                             <th scope="row"><?php esc_html_e( 'Plugin Settings', 'currify-currency-switcher' ); ?></th>
 81:                             <td>
 82:                                 <button type="submit" name="currify_debug_action" value="delete_settings" class="button button-secondary currify-debug-delete">
 83:                                     <?php esc_html_e( 'Delete All Plugin Settings', 'currify-currency-switcher' ); ?>
 84:                                 </button>
 85:                                 <p class="description"><?php esc_html_e( 'Deletes the `currify_settings` option from the database, resetting all configurations.', 'currify-currency-switcher' ); ?></p>
 86:                             </td>
 87:                         </tr>
 88:                          <tr valign="top">
 89:                             <th scope="row"><?php esc_html_e( 'Cron Timestamp', 'currify-currency-switcher' ); ?></th>
 90:                             <td>
 91:                                 <button type="submit" name="currify_debug_action" value="delete_cron_timestamp" class="button button-secondary currify-debug-delete">
 92:                                     <?php esc_html_e( 'Clear Last Cron Run Timestamp', 'currify-currency-switcher' ); ?>
 93:                                 </button>
 94:                                 <p class="description"><?php esc_html_e( 'Deletes the `currify_last_cron_run_success` option.', 'currify-currency-switcher' ); ?></p>
 95:                             </td>
 96:                         </tr>
 97:                     </table>
 98:                 </form>
 99:             </div>
100:         </div>
101:         <?php
102:     }
103: 
104:     /**
105:      * Handle the form submission for debug actions.
106:      */
107:     public function handle_debug_actions() {
108:         if ( ! isset( $_POST['currify_debug_action'] ) || ! isset( $_POST['_wpnonce'] ) ) {
109:             return;
110:         }
111: 
112:         if ( ! wp_verify_nonce( sanitize_key( $_POST['_wpnonce'] ), 'currify_debug_actions_nonce' ) ) {
113:             wp_die( 'Nonce verification failed.' );
114:         }
115: 
116:         if ( ! current_user_can( 'manage_options' ) ) {
117:             wp_die( 'Permission denied.' );
118:         }
119: 
120:         $action = sanitize_text_field( $_POST['currify_debug_action'] );
121:         // Redirect back to the debug tab with a success notice
122:         $redirect_url = admin_url( 'options-general.php?page=currify-switcher&tab=debug&currify-notice=data-cleared' );
123: 
124:         switch ( $action ) {
125:             case 'delete_settings':
126:                 delete_option( 'currify_settings' );
127:                 break;
128:             case 'delete_cron_timestamp':
129:                 delete_option( 'currify_last_cron_run_success' );
130:                 break;
131:         }
132: 
133:         wp_safe_redirect( $redirect_url );
134:         exit;
135:     }
136: }
137: ?>

================
File: code_1/includes/class-admin-geolocation.txt
================
 1: <?php
 2: 
 3: if ( ! defined( 'ABSPATH' ) ) {
 4:     exit; // Exit if accessed directly.
 5: }
 6: 
 7: class Currify_Admin_Geolocation {
 8: 
 9:     private $options;
10: 
11:     /**
12:      * Renders the checkbox to enable/disable the geolocation feature.
13:      */
14:     public function geolocation_enable_callback() {
15:         $this->options = get_option('currify_settings');
16:         $checked = isset($this->options['geolocation_enable']) && $this->options['geolocation_enable'] === '1' ? 'checked' : '';
17:         echo '<label for="geolocation_enable"><input type="checkbox" id="geolocation_enable" name="currify_settings[geolocation_enable]" value="1" ' . $checked . '> ';
18:         esc_html_e('Automatically select currency based on visitor\'s IP address.', 'currify-currency-switcher');
19:         echo '</label>';
20:         echo '<span class="currify-experimental-tag">Experimental</span>';
21:         echo '<p class="description">' . esc_html__('This feature uses a free, external IP-to-location service. No API key is required.', 'currify-currency-switcher') . '</p>';
22:     }
23: 
24:     /**
25:      * Renders the table for managing geolocation rules.
26:      */
27:     public function render_geolocation_rules_section() {
28:         $this->options = get_option('currify_settings');
29:         $rules = isset($this->options['geolocation_rules']) ? $this->options['geolocation_rules'] : [];
30:         
31:         $base_currency_code = get_option('woocommerce_currency');
32:         $saved_currencies = isset($this->options['currencies']) ? $this->options['currencies'] : [];
33:         $available_currencies = [$base_currency_code => $base_currency_code];
34:         foreach ($saved_currencies as $c) {
35:             if ( ! empty( $c['code'] ) ) {
36:                 $available_currencies[$c['code']] = $c['code'];
37:             }
38:         }
39:         ?>
40:         <p class="description"><?php esc_html_e('Create rules to assign a currency to visitors from specific countries. Rules are checked in order from top to bottom.', 'currify-currency-switcher'); ?></p>
41:         <table id="currify-geolocation-rules-table" class="wp-list-table widefat">
42:             <thead>
43:                 <tr>
44:                     <th><?php esc_html_e('Countries', 'currify-currency-switcher'); ?></th>
45:                     <th><?php esc_html_e('Currency', 'currify-currency-switcher'); ?></th>
46:                     <th class="column-actions"></th>
47:                 </tr>
48:             </thead>
49:             <tbody id="geolocation-rules-wrapper">
50:                 <?php if (!empty($rules)): foreach ($rules as $index => $rule): ?>
51:                 <tr class="geolocation-rule-row">
52:                     <td>
53:                         <select name="currify_settings[geolocation_rules][<?php echo esc_attr($index); ?>][countries][]" class="currify-select2-countries" multiple="multiple" style="width:100%;">
54:                             <?php foreach ($rule['countries'] as $country_code): ?>
55:                                 <option value="<?php echo esc_attr($country_code); ?>" selected="selected"><?php echo esc_html(WC()->countries->get_countries()[$country_code] ?? $country_code); ?></option>
56:                             <?php endforeach; ?>
57:                         </select>
58:                     </td>
59:                     <td>
60:                         <select name="currify_settings[geolocation_rules][<?php echo esc_attr($index); ?>][currency]">
61:                             <?php foreach($available_currencies as $code): ?>
62:                             <option value="<?php echo esc_attr($code); ?>" <?php selected($rule['currency'], $code); ?>><?php echo esc_html($code); ?></option>
63:                             <?php endforeach; ?>
64:                         </select>
65:                     </td>
66:                     <td class="column-actions"><a href="#" class="button-link-delete remove-geolocation-rule"><span class="dashicons dashicons-trash"></span></a></td>
67:                 </tr>
68:                 <?php endforeach; endif; ?>
69:             </tbody>
70:             <tfoot>
71:                 <tr>
72:                     <td colspan="3"><button type="button" id="add-geolocation-rule-button" class="button button-primary"><?php esc_html_e('Add Rule', 'currify-currency-switcher'); ?></button></td>
73:                 </tr>
74:             </tfoot>
75:         </table>
76:         <script type="text/template" id="geolocation-rule-template">
77:             <tr class="geolocation-rule-row">
78:                 <td><select name="currify_settings[geolocation_rules][__INDEX__][countries][]" class="currify-select2-countries" multiple="multiple" style="width:100%;"></select></td>
79:                 <td>
80:                     <select name="currify_settings[geolocation_rules][__INDEX__][currency]">
81:                         <?php foreach($available_currencies as $code): ?>
82:                         <option value="<?php echo esc_attr($code); ?>"><?php echo esc_html($code); ?></option>
83:                         <?php endforeach; ?>
84:                     </select>
85:                 </td>
86:                 <td class="column-actions"><a href="#" class="button-link-delete remove-geolocation-rule"><span class="dashicons dashicons-trash"></span></a></td>
87:             </tr>
88:         </script>
89:         <?php
90:     }
91: }
92: ?>

================
File: code_1/includes/class-admin-settings.txt
================
  1: <?php
  2: 
  3: if ( ! defined( 'ABSPATH' ) ) {
  4:     exit; // Exit if accessed directly.
  5: }
  6: 
  7: class Currify_Admin_Settings {
  8: 
  9:     private $options;
 10:     private $debug_handler;
 11:     private $geolocation_handler;
 12:     private $appearance_handler;
 13: 
 14:     public function __construct() {
 15:         $this->debug_handler = new Currify_Admin_Debug();
 16:         $this->geolocation_handler = new Currify_Admin_Geolocation();
 17:         $this->appearance_handler = new Currify_Admin_Appearance();
 18: 
 19:         add_action( 'admin_menu', array( $this, 'add_plugin_page' ) );
 20:         add_action( 'admin_init', array( $this, 'page_init' ) );
 21:         add_action( 'admin_init', array( $this, 'handle_cron_toggle_action' ) );
 22:         add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_admin_scripts' ) );
 23:         add_action( 'wp_ajax_currify_manual_rate_update', array( $this, 'manual_rate_update_ajax' ) );
 24:         add_action( 'wp_ajax_currify_save_settings', array( $this, 'save_settings_ajax' ) );
 25:         add_action( 'currify_update_exchange_rates_cron', array( $this, 'run_cron_update' ) );
 26:     }
 27:     
 28:     /**
 29:      * Handle the cron job enable/disable toggle using the Post/Redirect/Get pattern.
 30:      */
 31:     public function handle_cron_toggle_action() {
 32:         if ( ! isset( $_GET['currify_cron_action_nonce'] ) || ! wp_verify_nonce( sanitize_key( $_GET['currify_cron_action_nonce'] ), 'currify_cron_toggle_action' ) ) {
 33:             return;
 34:         }
 35:     
 36:         $base_url = admin_url('options-general.php?page=currify-switcher&tab=automation');
 37:         $redirect_url = '';
 38:     
 39:         if ( isset( $_GET['currify_cron_action'] ) && $_GET['currify_cron_action'] === 'enable' ) {
 40:             if ( ! wp_next_scheduled( 'currify_update_exchange_rates_cron', [] ) ) {
 41:                 wp_schedule_event( time(), 'daily', 'currify_update_exchange_rates_cron', [] );
 42:             }
 43:             $redirect_url = add_query_arg( 'cron-status', 'enabled', $base_url );
 44:     
 45:         } elseif ( isset( $_GET['currify_cron_action'] ) && $_GET['currify_cron_action'] === 'disable' ) {
 46:             $timestamp = wp_next_scheduled( 'currify_update_exchange_rates_cron', [] );
 47:             if ( $timestamp ) {
 48:                 wp_unschedule_event( $timestamp, 'currify_update_exchange_rates_cron', [] );
 49:             }
 50:             $redirect_url = add_query_arg( 'cron-status', 'disabled', $base_url );
 51:         }
 52:     
 53:         if ( ! empty( $redirect_url ) ) {
 54:             wp_safe_redirect( $redirect_url );
 55:             exit;
 56:         }
 57:     }
 58: 
 59:     public function enqueue_admin_scripts( $hook ) {
 60:         if ( 'settings_page_currify-switcher' !== $hook ) {
 61:             return;
 62:         }
 63:         wp_enqueue_media();
 64:         wp_enqueue_script('jquery-ui-sortable');
 65:         
 66:         // Enqueue WP Color Picker
 67:         wp_enqueue_style( 'wp-color-picker' );
 68:         wp_enqueue_script( 'wp-color-picker' );
 69: 
 70:         // Enqueue Select2
 71:         wp_enqueue_script( 'select2', 'https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js', array('jquery'), '4.0.13', true );
 72:         wp_enqueue_style( 'select2', 'https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css', array(), '4.0.13' );
 73: 
 74:         wp_enqueue_style( 'currify-admin-css', CURRIFY_PLUGIN_URL . 'assets/css/admin.css', array(), CURRIFY_VERSION );
 75:         wp_enqueue_style( 'currify-admin-dark-css', CURRIFY_PLUGIN_URL . 'assets/css/admin-dark.css', array(), CURRIFY_VERSION );
 76:         wp_enqueue_script( 'currify-admin-js', CURRIFY_PLUGIN_URL . 'assets/js/admin.js', array( 'jquery', 'jquery-ui-sortable', 'select2', 'wp-color-picker' ), CURRIFY_VERSION, true );
 77:         
 78:         wp_localize_script( 'currify-admin-js', 'currify_admin', array(
 79:             'ajax_url' => admin_url( 'admin-ajax.php' ),
 80:             'nonce' => wp_create_nonce('currify-admin-nonce'),
 81:             'countries' => WC()->countries->get_countries(),
 82:             'saved_currencies' => $this->get_currencies_for_live_preview(),
 83:         ));
 84:     }
 85: 
 86:     private function get_currencies_for_live_preview( $options = null ) {
 87:         if ($options === null) {
 88:             $options = get_option('currify_settings', []);
 89:         }
 90: 
 91:         $saved_currencies = [];
 92:         $base_currency = get_option('woocommerce_currency');
 93: 
 94:         // Add base currency for live preview
 95:         $saved_currencies[$base_currency] = [
 96:             'code' => $base_currency,
 97:             'symbol' => get_woocommerce_currency_symbol($base_currency),
 98:             'flag' => $options['base_currency_meta']['flag'] ?? '',
 99:         ];
100: 
101:         // Add other currencies for live preview
102:         if (!empty($options['currencies'])) {
103:             foreach ($options['currencies'] as $currency) {
104:                 if (!empty($currency['code'])) {
105:                     $saved_currencies[$currency['code']] = [
106:                         'code' => $currency['code'],
107:                         'symbol' => $currency['symbol'] ?? '',
108:                         'flag' => $currency['flag'] ?? '',
109:                     ];
110:                 }
111:             }
112:         }
113:         return array_values($saved_currencies);
114:     }
115: 
116:     public function add_plugin_page() {
117:         add_options_page(
118:             'Currify Switcher Settings',
119:             'Currify Switcher',
120:             'manage_options',
121:             'currify-switcher',
122:             array( $this, 'create_admin_page' )
123:         );
124:     }
125: 
126:     public function create_admin_page() {
127:         $this->options = get_option( 'currify_settings' );
128:         $active_tab = isset( $_GET['tab'] ) ? sanitize_key( $_GET['tab'] ) : 'currencies';
129:         ?>
130:         <div class="wrap">
131:             <div class="currify-settings-header">
132:                 <h1><?php esc_html_e( 'Currify Currency Switcher', 'currify-currency-switcher' ); ?></h1>
133:                 <button id="currify-dark-mode-toggle" class="currify-theme-toggle" title="<?php esc_attr_e('Toggle Dark Mode', 'currify-currency-switcher'); ?>">
134:                     <svg class="sun" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2.25a.75.75 0 01.75.75v2.25a.75.75 0 01-1.5 0V3a.75.75 0 01.75-.75zM7.5 12a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM18.894 6.106a.75.75 0 010 1.06l-1.591 1.59a.75.75 0 11-1.06-1.06l1.59-1.59a.75.75 0 011.06 0zM21.75 12a.75.75 0 01-.75.75h-2.25a.75.75 0 010-1.5H21a.75.75 0 01.75.75zM17.894 17.894a.75.75 0 011.06 0l1.59 1.59a.75.75 0 11-1.06 1.06l-1.59-1.59a.75.75 0 010-1.06zM12 18a.75.75 0 01.75.75v2.25a.75.75 0 01-1.5 0v-2.25A.75.75 0 0112 18zM5.106 17.894a.75.75 0 010-1.06l1.59-1.59a.75.75 0 111.06 1.06l-1.59 1.59a.75.75 0 01-1.06 0zM3 12a.75.75 0 01.75-.75h2.25a.75.75 0 010 1.5H3.75A.75.75 0 013 12zM6.106 5.106a.75.75 0 011.06 0l1.59 1.59a.75.75 0 01-1.06 1.06l-1.59-1.59a.75.75 0 010-1.06z"></path></svg>
135:                     <svg class="moon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path fill-rule="evenodd" d="M9.528 1.718a.75.75 0 01.162.819A8.97 8.97 0 009 6a9 9 0 009 9 8.97 8.97 0 003.463-.69.75.75 0 01.981.98 10.503 10.503 0 01-9.694 6.46c-5.799 0-10.5-4.701-10.5-10.5 0-3.833 2.067-7.17 5.168-9.002a.75.75 0 01.818.162z" clip-rule="evenodd"></path></svg>
136:                 </button>
137:             </div>
138:             
139:             <nav class="nav-tab-wrapper">
140:                 <a href="?page=currify-switcher&tab=currencies" class="nav-tab <?php echo $active_tab == 'currencies' ? 'nav-tab-active' : ''; ?>"><?php esc_html_e('Currencies', 'currify-currency-switcher'); ?></a>
141:                 <a href="?page=currify-switcher&tab=appearance" class="nav-tab <?php echo $active_tab == 'appearance' ? 'nav-tab-active' : ''; ?>"><?php esc_html_e('Appearance', 'currify-currency-switcher'); ?></a>
142:                 <a href="?page=currify-switcher&tab=geolocation" class="nav-tab <?php echo $active_tab == 'geolocation' ? 'nav-tab-active' : ''; ?>"><?php esc_html_e('Geolocation', 'currify-currency-switcher'); ?></a>
143:                 <a href="?page=currify-switcher&tab=payment_gateways" class="nav-tab <?php echo $active_tab == 'payment_gateways' ? 'nav-tab-active' : ''; ?>"><?php esc_html_e('Payment Gateways', 'currify-currency-switcher'); ?></a>
144:                 <a href="?page=currify-switcher&tab=automation" class="nav-tab <?php echo $active_tab == 'automation' ? 'nav-tab-active' : ''; ?>"><?php esc_html_e('Automation', 'currify-currency-switcher'); ?></a>
145:                 <a href="?page=currify-switcher&tab=debug" class="nav-tab <?php echo $active_tab == 'debug' ? 'nav-tab-active' : ''; ?>"><?php esc_html_e('Debugging', 'currify-currency-switcher'); ?></a>
146:             </nav>
147: 
148:             <div class="currify-tab-content-wrapper">
149:                 <form method="post" action="options.php" id="currify-main-settings-form">
150:                     <?php settings_fields( 'currify_option_group' ); ?>
151:                     
152:                     <div id="tab-currencies" class="currify-tab-pane <?php echo $active_tab == 'currencies' ? 'active' : ''; ?>">
153:                         <?php $this->render_currencies_tab(); ?>
154:                     </div>
155:                      <div id="tab-appearance" class="currify-tab-pane <?php echo $active_tab == 'appearance' ? 'active' : ''; ?>">
156:                         <?php $this->render_appearance_tab(); ?>
157:                     </div>
158:                     <div id="tab-geolocation" class="currify-tab-pane <?php echo $active_tab == 'geolocation' ? 'active' : ''; ?>">
159:                         <?php $this->render_geolocation_tab(); ?>
160:                     </div>
161:                     <div id="tab-payment_gateways" class="currify-tab-pane <?php echo $active_tab == 'payment_gateways' ? 'active' : ''; ?>">
162:                         <?php $this->render_payment_gateways_tab(); ?>
163:                     </div>
164:                     <div id="tab-automation" class="currify-tab-pane <?php echo $active_tab == 'automation' ? 'active' : ''; ?>">
165:                         <?php $this->render_automation_tab(); ?>
166:                     </div>
167:                 </form>
168: 
169:                 <div id="tab-debug" class="currify-tab-pane <?php echo $active_tab == 'debug' ? 'active' : ''; ?>">
170:                     <?php $this->debug_handler->render_debug_page_content(); ?>
171:                 </div>
172: 
173:                 <div id="currify-floating-save-container" class="<?php echo $active_tab == 'debug' ? 'hidden' : ''; ?>">
174:                     <button type="submit" name="submit" id="currify-floating-submit" class="button button-primary button-hero is-dirty">
175:                         <span class="currify-save-icon dashicons dashicons-saved"></span>
176:                         <span class="currify-save-text"><?php esc_html_e( 'Save', 'currify-currency-switcher' ); ?></span>
177:                     </button>
178:                 </div>
179:             </div>
180:         </div>
181:         <?php
182:     }
183:     
184:     /** Renders the "Currencies" tab content. */
185:     private function render_currencies_tab() {
186:         ?>
187:         <div class="postbox">
188:             <div class="postbox-header"><h2><?php esc_html_e( 'Currency Manager', 'currify-currency-switcher' ); ?></h2></div>
189:             <div class="inside">
190:                 <table class="form-table">
191:                     <?php do_settings_fields( 'currify-admin', 'currify_setting_section_currencies' ); ?>
192:                 </table>
193:                 <?php 
194:                 $this->print_currency_section_info();
195:                 $this->currencies_callback(); 
196:                 ?>
197:             </div>
198:         </div>
199:         <?php
200:     }
201: 
202:     /** Renders the "Appearance" tab content. */
203:     private function render_appearance_tab() {
204:         $this->appearance_handler->render_tab_content();
205:     }
206: 
207:     /** Renders the "Geolocation" tab content. */
208:     private function render_geolocation_tab() {
209:         ?>
210:         <div class="postbox">
211:             <div class="postbox-header"><h2><?php esc_html_e( 'Geolocation Settings', 'currify-currency-switcher' ); ?></h2></div>
212:             <div class="inside">
213:                 <table class="form-table">
214:                     <?php do_settings_fields( 'currify-admin', 'currify_setting_section_geolocation' ); ?>
215:                 </table>
216:                 <hr/>
217:                 <h3><?php esc_html_e('Geolocation Rules', 'currify-currency-switcher'); ?></h3>
218:                 <?php $this->geolocation_handler->render_geolocation_rules_section(); ?>
219:             </div>
220:         </div>
221:         <?php
222:     }
223: 
224:     /** Renders the "Payment Gateways" tab content. */
225:     private function render_payment_gateways_tab() {
226:         ?>
227:         <div class="postbox">
228:             <div class="postbox-header"><h2><?php esc_html_e( 'Payment Gateway Rules', 'currify-currency-switcher' ); ?></h2></div>
229:             <div class="inside">
230:                 <?php $this->payment_gateway_rules_callback(); ?>
231:             </div>
232:         </div>
233:         <?php
234:     }
235: 
236:     /** Renders the "Automation" tab content. */
237:     private function render_automation_tab() {
238:         ?>
239:         <div class="postbox">
240:             <div class="postbox-header"><h2><?php esc_html_e( 'Automation', 'currify-currency-switcher' ); ?></h2></div>
241:             <div class="inside">
242:                 <?php $this->print_cron_section_info(); ?>
243:                 <table class="form-table">
244:                     <?php do_settings_fields( 'currify-admin', 'currify_setting_section_cron' ); ?>
245:                 </table>
246:             </div>
247:         </div>
248:         <?php
249:     }
250: 
251: 
252:     public function page_init() {
253:         register_setting( 'currify_option_group', 'currify_settings', array( $this, 'sanitize' ) );
254: 
255:         // Currency Settings
256:         add_settings_section( 'currify_setting_section_currencies', null, null, 'currify-admin' );
257:         add_settings_field('default_frontend_currency', __( 'Default Frontend Currency', 'currify-currency-switcher' ), array( $this, 'default_frontend_currency_callback' ), 'currify-admin', 'currify_setting_section_currencies');
258:         
259:         // Appearance Settings
260:         $this->appearance_handler->register_settings();
261: 
262:         // Geolocation Settings
263:         add_settings_section( 'currify_setting_section_geolocation', null, null, 'currify-admin' );
264:         add_settings_field('geolocation_enable', __( 'Enable Geolocation', 'currify-currency-switcher' ), array( $this->geolocation_handler, 'geolocation_enable_callback' ), 'currify-admin', 'currify_setting_section_geolocation');
265:         
266:         // Automation Settings
267:         add_settings_section( 'currify_setting_section_cron', null, null, 'currify-admin' );
268:         add_settings_field('exchangerate_api_key', __( 'ExchangeRate-API Key', 'currify-currency-switcher' ), array( $this, 'exchangerate_api_key_callback' ), 'currify-admin', 'currify_setting_section_cron');
269:         add_settings_field('cron_controls', __( 'Cron Controls', 'currify-currency-switcher' ), array( $this, 'cron_controls_callback' ), 'currify-admin', 'currify_setting_section_cron');
270:     }
271:     
272:     public function sanitize( $input ) {
273:         $new_input = [];
274:         $settings_map = [
275:             'exchangerate_api_key' => 'sanitize_text_field',
276:             'default_frontend_currency' => 'sanitize_text_field',
277:             'geolocation_enable' => 'sanitize_text_field',
278:             'switcher_style' => 'sanitize_text_field',
279:             'switcher_grid_columns' => 'absint',
280:             'switcher_enable_scrolling' => 'sanitize_text_field',
281:             'switcher_visible_rows' => 'absint',
282:             'switcher_primary_color' => 'sanitize_hex_color',
283:             'switcher_background_color' => 'sanitize_hex_color',
284:             'product_page_location' => 'sanitize_text_field',
285:             'product_page_switcher_style' => 'sanitize_text_field',
286:         ];
287: 
288:         foreach ( $settings_map as $key => $sanitizer ) {
289:             if ( isset( $input[$key] ) ) {
290:                 $new_input[$key] = call_user_func( $sanitizer, $input[$key] );
291:             }
292:         }
293: 
294:         if ( isset( $new_input['switcher_grid_columns'] ) && $new_input['switcher_grid_columns'] < 1 ) {
295:             $new_input['switcher_grid_columns'] = 1;
296:         }
297:         if ( isset( $new_input['switcher_visible_rows'] ) && $new_input['switcher_visible_rows'] < 1 ) {
298:             $new_input['switcher_visible_rows'] = 1;
299:         }
300: 
301:         // Sanitize checkbox array for global display locations
302:         $new_input['global_display_locations'] = [];
303:         if (isset($input['global_display_locations']) && is_array($input['global_display_locations'])) {
304:             foreach ($input['global_display_locations'] as $location => $value) {
305:                 if ($value === '1') {
306:                     $new_input['global_display_locations'][sanitize_key($location)] = '1';
307:                 }
308:             }
309:         }
310:         
311:         // Base currency flag
312:         $new_input['base_currency_meta'] = [ 'flag' => '' ];
313:         if ( isset( $input['base_currency_meta']['flag'] ) ) {
314:             $new_input['base_currency_meta']['flag'] = esc_url_raw( $input['base_currency_meta']['flag'] );
315:         }
316:     
317:         // Currencies array
318:         $sanitized_currencies = [];
319:         $base_currency_code = get_option( 'woocommerce_currency' );
320:         if ( isset( $input['currencies'] ) && is_array( $input['currencies'] ) ) {
321:             foreach ( $input['currencies'] as $currency_data ) {
322:                 if ( ! is_array( $currency_data ) || empty( $currency_data['code'] ) || $currency_data['code'] === $base_currency_code ) {
323:                     continue;
324:                 }
325:                 $new_currency = [];
326:                 $new_currency['code'] = sanitize_text_field( $currency_data['code'] );
327:                 $new_currency['symbol'] = isset($currency_data['symbol']) ? sanitize_text_field( $currency_data['symbol'] ) : '';
328:                 $new_currency['flag'] = isset($currency_data['flag']) ? esc_url_raw( $currency_data['flag'] ) : '';
329:                 $new_currency['rate_source'] = isset($currency_data['rate_source']) ? sanitize_text_field( $currency_data['rate_source'] ) : 'manual';
330:                 $new_currency['rate'] = isset($currency_data['rate']) ? sanitize_text_field( $currency_data['rate'] ) : '';
331:                 $new_currency['symbol_pos'] = isset($currency_data['symbol_pos']) ? sanitize_text_field( $currency_data['symbol_pos'] ) : 'left';
332:                 $new_currency['thousand_sep'] = isset($currency_data['thousand_sep']) ? sanitize_text_field( $currency_data['thousand_sep'] ) : ',';
333:                 $new_currency['decimal_sep'] = isset($currency_data['decimal_sep']) ? sanitize_text_field( $currency_data['decimal_sep'] ) : '.';
334:                 $new_currency['decimals'] = isset($currency_data['decimals']) ? absint( $currency_data['decimals'] ) : 2;
335:                 $sanitized_currencies[] = $new_currency;
336:             }
337:         }
338:         $new_input['currencies'] = array_values($sanitized_currencies);
339: 
340:         // Geolocation rules
341:         $new_input['geolocation_rules'] = [];
342:         if (isset($input['geolocation_rules']) && is_array($input['geolocation_rules'])) {
343:             foreach ($input['geolocation_rules'] as $rule) {
344:                 if (empty($rule['countries']) || empty($rule['currency'])) continue;
345:                 $new_rule['currency'] = sanitize_text_field($rule['currency']);
346:                 $new_rule['countries'] = array_map('sanitize_text_field', (array)$rule['countries']);
347:                 $new_input['geolocation_rules'][] = $new_rule;
348:             }
349:         }
350: 
351:         // Payment gateway rules
352:         $new_input['payment_gateway_rules'] = [];
353:         if (isset($input['payment_gateway_rules']) && is_array($input['payment_gateway_rules'])) {
354:             foreach ($input['payment_gateway_rules'] as $gateway_id => $rule) {
355:                 $sanitized_id = sanitize_key($gateway_id);
356:                 $new_input['payment_gateway_rules'][$sanitized_id] = [
357:                     'currencies' => isset($rule['currencies']) ? array_map('sanitize_text_field', (array)$rule['currencies']) : []
358:                 ];
359:             }
360:         }
361: 
362:         return $new_input;
363:     }
364:     
365:     public function save_settings_ajax() {
366:         check_ajax_referer('currify_option_group-options', '_wpnonce');
367:         
368:         if (!current_user_can('manage_options')) {
369:             wp_send_json_error(__('Permission denied', 'currify-currency-switcher'));
370:         }
371:         
372:         $form_data = [];
373:         if (isset($_POST['form_data'])) {
374:             parse_str(wp_unslash($_POST['form_data']), $form_data);
375:         }
376: 
377:         $settings_to_save = isset($form_data['currify_settings']) ? $form_data['currify_settings'] : [];
378:         $sanitized_settings = $this->sanitize($settings_to_save);
379:         
380:         $result = update_option('currify_settings', $sanitized_settings);
381: 
382:         // Prepare data for live preview refresh
383:         $live_preview_currencies = $this->get_currencies_for_live_preview($sanitized_settings);
384: 
385:         if ($result) {
386:             wp_send_json_success([
387:                 'message' => __('Settings saved.', 'currify-currency-switcher'),
388:                 'currencies' => $live_preview_currencies
389:             ]);
390:         } else {
391:             wp_send_json_success([
392:                 'message' => __('Settings are up to date.', 'currify-currency-switcher'),
393:                 'currencies' => $live_preview_currencies
394:             ]);
395:         }
396:     }
397: 
398: 
399:     public function exchangerate_api_key_callback() {
400:         $api_key = isset( $this->options['exchangerate_api_key'] ) ? $this->options['exchangerate_api_key'] : '';
401:         printf(
402:             '<input type="text" id="exchangerate_api_key" name="currify_settings[exchangerate_api_key]" value="%s" size="50" />',
403:             esc_attr( $api_key )
404:         );
405:         echo '<p class="description">' . sprintf(
406:             wp_kses(
407:                 __( 'Enter your free API Key from <a href="%s" target="_blank">ExchangeRate-API.com</a> for automatic rate updates.', 'currify-currency-switcher' ),
408:                 array( 'a' => array( 'href' => array(), 'target' => array() ) )
409:             ),
410:             'https://www.exchangerate-api.com'
411:         ) . '</p>';
412:     }
413: 
414:     public function default_frontend_currency_callback() {
415:         $base_currency_code = get_option('woocommerce_currency');
416:         $saved_currencies = isset( $this->options['currencies'] ) && is_array($this->options['currencies']) ? $this->options['currencies'] : array();
417:         $current_default = isset( $this->options['default_frontend_currency'] ) ? $this->options['default_frontend_currency'] : $base_currency_code;
418:     
419:         $all_currencies = [ $base_currency_code => get_woocommerce_currency_symbol($base_currency_code) . " ({$base_currency_code})" ];
420:         foreach ($saved_currencies as $currency) {
421:             if (!empty($currency['code'])) {
422:                 $all_currencies[$currency['code']] = $currency['symbol'] . " ({$currency['code']})";
423:             }
424:         }
425:         
426:         echo "<select id='default_frontend_currency' name='currify_settings[default_frontend_currency]'>";
427:         foreach ($all_currencies as $code => $label) {
428:             echo "<option value='" . esc_attr($code) . "' " . selected($current_default, $code, false) . ">" . esc_html($label) . "</option>";
429:         }
430:         echo "</select>";
431:         echo '<p class="description">' . esc_html__('Select the currency to be shown to new visitors if Geolocation is disabled or fails.', 'currify-currency-switcher') . '</p>';
432:     }
433: 
434:     public function print_currency_section_info() {
435:         echo '<p class="description" style="margin-bottom: 1em;">' . sprintf(
436:             wp_kses(
437:                 __( 'Add currencies and drag rows to reorder. To use an SVG symbol, place an SVG file named after the currency code (e.g., <code>aed.svg</code>) in the <code>%s</code> folder.', 'currify-currency-switcher' ),
438:                 array('code' => array())
439:             ),
440:             'wp-content/plugins/currify-currency-switcher/assets/images/symbols/'
441:         ) . '</p>';
442:     }
443: 
444:     // Existing currencies_callback() remains the same...
445:     public function currencies_callback() {
446:         $base_currency_code = get_option('woocommerce_currency');
447:         $base_currency_flag = isset( $this->options['base_currency_meta']['flag'] ) ? $this->options['base_currency_meta']['flag'] : '';
448: 
449:         $base_currency_data_for_display = [
450:             'code' => $base_currency_code,
451:             'symbol' => get_woocommerce_currency_symbol($base_currency_code),
452:             'flag' => $base_currency_flag,
453:             'rate_source' => 'manual',
454:             'rate' => '1.0',
455:             'symbol_pos' => get_option('woocommerce_currency_pos'),
456:             'thousand_sep' => wc_get_price_thousand_separator(),
457:             'decimal_sep' => wc_get_price_decimal_separator(),
458:             'decimals' => wc_get_price_decimals()
459:         ];
460:         
461:         $saved_currencies = isset( $this->options['currencies'] ) && is_array($this->options['currencies']) ? $this->options['currencies'] : array();
462:         
463:         $currencies_for_display = array_merge([$base_currency_data_for_display], $saved_currencies);
464:         ?>
465:         <table id="currify-currencies-table" class="wp-list-table widefat fixed striped">
466:             <thead>
467:                 <tr>
468:                     <th class="column-drag"></th>
469:                     <th class="column-code"><?php esc_html_e('Code', 'currify-currency-switcher'); ?></th>
470:                     <th class="column-symbol"><?php esc_html_e('Symbol', 'currify-currency-switcher'); ?></th>
471:                     <th class="column-flag"><?php esc_html_e('Flag', 'currify-currency-switcher'); ?></th>
472:                     <th class="column-rate-source"><?php esc_html_e('Rate Source', 'currify-currency-switcher'); ?></th>
473:                     <th class="column-rate"><?php esc_html_e('Exchange Rate', 'currify-currency-switcher'); ?></th>
474:                     <th class="column-position"><?php esc_html_e('Position', 'currify-currency-switcher'); ?></th>
475:                     <th class="column-formatting"><?php esc_html_e('Format Preview', 'currify-currency-switcher'); ?></th>
476:                     <th class="column-actions"></th>
477:                 </tr>
478:             </thead>
479:             <tbody id="currency-rows-wrapper">
480:                 <?php if ( ! empty( $currencies_for_display ) ) : foreach ( $currencies_for_display as $key => $currency ) : 
481:                     $is_base_currency = ($currency['code'] === $base_currency_code);
482:                     $name_key = $key;
483:                     // Determine CSS class for preview based on if 'left' is in the position string
484:                     $position_class = (strpos($currency['symbol_pos'], 'left') !== false) ? 'left' : 'right';
485:                 ?>
486:                     <tr class="currency-row<?php echo $is_base_currency ? ' base-currency-row' : ''; ?>">
487:                         <td class="column-drag currency-drag-handle"><span class="dashicons dashicons-move"></span></td>
488:                         <td><input type="text" name="currify_settings[currencies][<?php echo esc_attr($name_key); ?>][code]" value="<?php echo esc_attr($currency['code']); ?>" placeholder="e.g., EUR" <?php echo $is_base_currency ? 'readonly' : ''; ?> /></td>
489:                         <td><input type="text" name="currify_settings[currencies][<?php echo esc_attr($name_key); ?>][symbol]" value="<?php echo esc_attr($currency['symbol']); ?>" placeholder="e.g., €" <?php echo $is_base_currency ? 'readonly' : ''; ?> /></td>
490:                         <td>
491:                             <div class="currify-flag-cell">
492:                                 <div class="flag-preview" title="<?php esc_attr_e('Click to select or upload a flag', 'currify-currency-switcher'); ?>">
493:                                     <?php if (!empty($currency['flag'])): ?>
494:                                     <img src="<?php echo esc_url($currency['flag']); ?>"/>
495:                                     <?php endif; ?>
496:                                 </div>
497:                                 <?php if ($is_base_currency): ?>
498:                                     <input type="hidden" class="flag-url" name="currify_settings[base_currency_meta][flag]" value="<?php echo esc_attr($currency['flag']); ?>" />
499:                                 <?php else: ?>
500:                                     <input type="hidden" class="flag-url" name="currify_settings[currencies][<?php echo esc_attr($name_key); ?>][flag]" value="<?php echo esc_attr($currency['flag']); ?>" />
501:                                 <?php endif; ?>
502:                                 <a href="#" class="clear-flag-button <?php echo empty($currency['flag']) ? 'hidden' : ''; ?>" title="<?php esc_attr_e( 'Clear flag', 'currify-currency-switcher' ); ?>"><span class="dashicons dashicons-trash"></span></a>
503:                             </div>
504:                         </td>
505:                         <td>
506:                             <select name="currify_settings[currencies][<?php echo esc_attr($name_key); ?>][rate_source]" <?php echo $is_base_currency ? 'disabled' : ''; ?>>
507:                                 <option value="automatic" <?php selected($currency['rate_source'], 'automatic'); ?>><?php esc_html_e('Automatic', 'currify-currency-switcher'); ?></option>
508:                                 <option value="manual" <?php selected($currency['rate_source'], 'manual'); ?>><?php esc_html_e('Manual', 'currify-currency-switcher'); ?></option>
509:                             </select>
510:                         </td>
511:                         <td><input type="text" class="wc_input_decimal" name="currify_settings[currencies][<?php echo esc_attr($name_key); ?>][rate]" value="<?php echo esc_attr($currency['rate']); ?>" <?php echo $is_base_currency ? 'readonly' : ''; ?> /></td>
512:                         <td>
513:                             <select class="format-position-select" name="currify_settings[currencies][<?php echo esc_attr($name_key); ?>][symbol_pos]">
514:                                 <option value="left" <?php selected($currency['symbol_pos'], 'left'); ?>><?php esc_html_e('Left', 'currify-currency-switcher'); ?></option>
515:                                 <option value="left_space" <?php selected($currency['symbol_pos'], 'left_space'); ?>><?php esc_html_e('Left with space', 'currify-currency-switcher'); ?></option>
516:                                 <option value="right" <?php selected($currency['symbol_pos'], 'right'); ?>><?php esc_html_e('Right', 'currify-currency-switcher'); ?></option>
517:                                 <option value="right_space" <?php selected($currency['symbol_pos'], 'right_space'); ?>><?php esc_html_e('Right with space', 'currify-currency-switcher'); ?></option>
518:                             </select>
519:                         </td>
520:                         <td>
521:                            <div class="currify-format-editor position-<?php echo esc_attr($position_class); ?>">
522:                                 <div class="currify-format-preview">
523:                                     <span class="preview-symbol left-symbol"><?php echo esc_html($currency['symbol']); ?></span>
524:                                     <span class="preview-number">1</span>
525:                                     <input type="text" size="1" class="preview-sep" name="currify_settings[currencies][<?php echo esc_attr($name_key); ?>][thousand_sep]" value="<?php echo esc_attr($currency['thousand_sep']); ?>" placeholder="," />
526:                                     <span class="preview-number">000</span>
527:                                     <input type="text" size="1" class="preview-sep" name="currify_settings[currencies][<?php echo esc_attr($name_key); ?>][decimal_sep]" value="<?php echo esc_attr($currency['decimal_sep']); ?>" placeholder="." />
528:                                     <input type="number" min="0" step="1" class="preview-decimals-input" name="currify_settings[currencies][<?php echo esc_attr($name_key); ?>][decimals]" value="<?php echo esc_attr($currency['decimals']); ?>" title="<?php esc_attr_e('Number of decimals', 'currify-currency-switcher'); ?>" />
529:                                     <span class="preview-symbol right-symbol"><?php echo esc_html($currency['symbol']); ?></span>
530:                                 </div>
531:                             </div>
532:                         </td>
533:                         <td>
534:                             <?php if (!$is_base_currency): ?>
535:                             <a href="#" class="button-link-delete remove-currency-row"><span class="dashicons dashicons-trash"></span></a>
536:                             <?php else: ?>
537:                             <span class="dashicons dashicons-lock" title="<?php esc_attr_e('Base currency cannot be deleted.', 'currify-currency-switcher'); ?>"></span>
538:                             <?php endif; ?>
539:                         </td>
540:                     </tr>
541:                 <?php endforeach; endif; ?>
542:             </tbody>
543:             <tfoot>
544:                 <tr>
545:                     <td colspan="9">
546:                         <button type="button" id="add-currency-button" class="button button-primary"><?php esc_html_e('Add Currency', 'currify-currency-switcher'); ?></button>
547:                         <button type="button" class="button currify-manual-update-trigger" style="margin-left: 10px;">
548:                             <?php esc_html_e( 'Run Exchange Rate Update Now', 'currify-currency-switcher' ); ?>
549:                         </button>
550:                         <span class="spinner currify-update-spinner"></span>
551:                         <span class="currify-update-status"></span>
552:                     </td>
553:                 </tr>
554:             </tfoot>
555:         </table>
556:         
557:         <script type="text/template" id="currency-row-template">
558:             <tr class="currency-row">
559:                 <td class="column-drag currency-drag-handle"><span class="dashicons dashicons-move"></span></td>
560:                 <td><input type="text" name="currify_settings[currencies][__INDEX__][code]" placeholder="e.g., SYP" /></td>
561:                 <td><input type="text" name="currify_settings[currencies][__INDEX__][symbol]" placeholder="e.g., ل.س" /></td>
562:                 <td>
563:                     <div class="currify-flag-cell">
564:                         <div class="flag-preview" title="<?php esc_attr_e('Click to select or upload a flag', 'currify-currency-switcher'); ?>"></div>
565:                         <input type="hidden" class="flag-url" name="currify_settings[currencies][__INDEX__][flag]" value="" />
566:                         <a href="#" class="clear-flag-button hidden" title="<?php esc_attr_e( 'Clear flag', 'currify-currency-switcher' ); ?>"><span class="dashicons dashicons-trash"></span></a>
567:                     </div>
568:                 </td>
569:                 <td>
570:                     <select name="currify_settings[currencies][__INDEX__][rate_source]">
571:                         <option value="automatic"><?php esc_html_e('Automatic', 'currify-currency-switcher'); ?></option>
572:                         <option value="manual"><?php esc_html_e('Manual', 'currify-currency-switcher'); ?></option>
573:                     </select>
574:                 </td>
575:                 <td><input type="text" class="wc_input_decimal" name="currify_settings[currencies][__INDEX__][rate]" value="" /></td>
576:                 <td>
577:                     <select class="format-position-select" name="currify_settings[currencies][__INDEX__][symbol_pos]">
578:                         <option value="left"><?php esc_html_e('Left', 'currify-currency-switcher'); ?></option>
579:                         <option value="left_space"><?php esc_html_e('Left with space', 'currify-currency-switcher'); ?></option>
580:                         <option value="right"><?php esc_html_e('Right', 'currify-currency-switcher'); ?></option>
581:                         <option value="right_space"><?php esc_html_e('Right with space', 'currify-currency-switcher'); ?></option>
582:                     </select>
583:                 </td>
584:                 <td>
585:                     <div class="currify-format-editor position-left">
586:                         <div class="currify-format-preview">
587:                             <span class="preview-symbol left-symbol"></span>
588:                             <span class="preview-number">1</span>
589:                             <input type="text" size="1" class="preview-sep" name="currify_settings[currencies][__INDEX__][thousand_sep]" value="," />
590:                             <span class="preview-number">000</span>
591:                             <input type="text" size="1" class="preview-sep" name="currify_settings[currencies][__INDEX__][decimal_sep]" value="." />
592:                             <input type="number" min="0" step="1" class="preview-decimals-input" name="currify_settings[currencies][__INDEX__][decimals]" value="2" title="<?php esc_attr_e('Number of decimals', 'currify-currency-switcher'); ?>" />
593:                             <span class="preview-symbol right-symbol"></span>
594:                         </div>
595:                     </div>
596:                 </td>
597:                 <td><a href="#" class="button-link-delete remove-currency-row"><span class="dashicons dashicons-trash"></span></a></td>
598:             </tr>
599:         </script>
600:         <?php
601:     }
602:     
603:     public function payment_gateway_rules_callback() {
604:         $rules = isset($this->options['payment_gateway_rules']) ? $this->options['payment_gateway_rules'] : [];
605:         $gateways = WC()->payment_gateways->get_available_payment_gateways();
606: 
607:         $base_currency_code = get_option('woocommerce_currency');
608:         $saved_currencies = isset($this->options['currencies']) ? $this->options['currencies'] : [];
609:         $available_currencies = [$base_currency_code => $base_currency_code];
610:         foreach ($saved_currencies as $c) {
611:             $available_currencies[$c['code']] = $c['code'];
612:         }
613: 
614:         echo '<p class="description">' . esc_html__('Specify which currencies each payment gateway should be available for. If a gateway has no currencies selected, it will be available for all.', 'currify-currency-switcher') . '</p>';
615:         
616:         echo '<table class="form-table">';
617:         foreach ($gateways as $gateway_id => $gateway) {
618:             $selected_currencies = $rules[$gateway_id]['currencies'] ?? [];
619:             ?>
620:             <tr valign="top">
621:                 <th scope="row">
622:                     <label for="gateway_rule_<?php echo esc_attr($gateway_id); ?>"><?php echo esc_html($gateway->get_title()); ?></label>
623:                 </th>
624:                 <td>
625:                     <select id="gateway_rule_<?php echo esc_attr($gateway_id); ?>" name="currify_settings[payment_gateway_rules][<?php echo esc_attr($gateway_id); ?>][currencies][]" class="currify-select2-currencies" multiple="multiple" style="width:50%;">
626:                         <?php foreach ($available_currencies as $code): ?>
627:                             <option value="<?php echo esc_attr($code); ?>" <?php selected(in_array($code, $selected_currencies)); ?>><?php echo esc_html($code); ?></option>
628:                         <?php endforeach; ?>
629:                     </select>
630:                 </td>
631:             </tr>
632:             <?php
633:         }
634:         echo '</table>';
635:     }
636: 
637: 
638:     public function print_cron_section_info() {
639:         $timestamp = wp_next_scheduled( 'currify_update_exchange_rates_cron', [] );
640:         if ( $timestamp ) {
641:             $next_run = get_date_from_gmt( date( 'Y-m-d H:i:s', $timestamp ), 'Y-m-d H:i:s' );
642:             echo '<p class="description">' . sprintf( esc_html__( 'Automatic updates are enabled. Next run is scheduled for: %s.', 'currify-currency-switcher' ), '<strong>' . $next_run . '</strong>' ) . '</p>';
643:         } else {
644:             echo '<p class="description">' . esc_html__( 'Automatic updates are currently disabled.', 'currify-currency-switcher' ) . '</p>';
645:         }
646: 
647:         $last_run_timestamp = get_option( 'currify_last_cron_run_success' );
648:         if ( $last_run_timestamp ) {
649:             $last_run_date = get_date_from_gmt( date( 'Y-m-d H:i:s', $last_run_timestamp ), 'Y-m-d H:i:s' );
650:             echo '<p class="description">' . sprintf( esc_html__( 'Last successful update: %s.', 'currify-currency-switcher' ), '<strong>' . $last_run_date . '</strong>' ) . '</p>';
651:         } else {
652:             echo '<p class="description">' . esc_html__( 'The cron job has not completed a successful update yet.', 'currify-currency-switcher' ) . '</p>';
653:         }
654:     }
655: 
656:     public function cron_controls_callback() {
657:         if ( isset( $_GET['cron-status'] ) ) {
658:             $status = sanitize_key( $_GET['cron-status'] );
659:             $message = '';
660:             if ( $status === 'enabled' ) {
661:                 $message = __( 'Automatic updates have been enabled.', 'currify-currency-switcher' );
662:             } elseif ( $status === 'disabled' ) {
663:                 $message = __( 'Automatic updates have been disabled.', 'currify-currency-switcher' );
664:             }
665:             if ( ! empty( $message ) ) {
666:                 echo '<div class="notice notice-success is-dismissible" style="display:inline-block; margin-bottom: 1em;"><p>' . esc_html( $message ) . '</p></div>';
667:             }
668:         }
669:     
670:         $is_scheduled = wp_next_scheduled( 'currify_update_exchange_rates_cron', [] );
671:         ?>
672:         <button type="button" class="button currify-manual-update-trigger">
673:             <?php esc_html_e( 'Run Exchange Rate Update Now', 'currify-currency-switcher' ); ?>
674:         </button>
675:         <span class="spinner currify-update-spinner"></span>
676:         <span class="currify-update-status"></span>
677: 
678:         <div style="display:inline-block; margin-left: 20px;">
679:         <?php
680:             $base_url = admin_url('options-general.php?page=currify-switcher&tab=automation');
681:             $nonce = wp_create_nonce('currify_cron_toggle_action');
682: 
683:             if ( $is_scheduled ) {
684:                 $action_url = add_query_arg([
685:                     'currify_cron_action' => 'disable',
686:                     'currify_cron_action_nonce' => $nonce
687:                 ], $base_url);
688:                 echo '<a href="' . esc_url($action_url) . '" class="button button-secondary">' . esc_html__('Disable Automatic Updates', 'currify-currency-switcher') . '</a>';
689:             } else {
690:                 $action_url = add_query_arg([
691:                     'currify_cron_action' => 'enable',
692:                     'currify_cron_action_nonce' => $nonce
693:                 ], $base_url);
694:                 echo '<a href="' . esc_url($action_url) . '" class="button button-primary">' . esc_html__('Enable Automatic Updates', 'currify-currency-switcher') . '</a>';
695:             }
696:         ?>
697:         </div>
698:         <p class="description"><?php esc_html_e('Manually fetch rates, or enable/disable the daily automatic update job.', 'currify-currency-switcher'); ?></p>
699:         <?php
700:     }
701:     
702:     public function manual_rate_update_ajax() {
703:         check_ajax_referer('currify-admin-nonce', 'nonce');
704: 
705:         if (!current_user_can('manage_options')) {
706:             wp_send_json_error('Permission denied');
707:         }
708: 
709:         $result = $this->fetch_and_prepare_rates();
710: 
711:         if (is_wp_error($result)) {
712:             wp_send_json_error($result->get_error_message());
713:         }
714: 
715:         wp_send_json_success($result);
716:     }
717: 
718:     public function run_cron_update() {
719:         $rates = $this->fetch_and_prepare_rates();
720: 
721:         if (is_wp_error($rates)) {
722:             return;
723:         }
724:         
725:         $options = get_option('currify_settings');
726:         if ( ! isset( $options['currencies'] ) || ! is_array( $options['currencies'] ) ) {
727:             return;
728:         }
729: 
730:         $all_currencies = $options['currencies'];
731:         $updated_count = 0;
732:     
733:         foreach ($all_currencies as $index => $currency) {
734:             if (isset($currency['rate_source']) && $currency['rate_source'] === 'automatic') {
735:                 $code_to_check = strtoupper($currency['code']);
736:                 if (isset($rates[$code_to_check])) {
737:                     $all_currencies[$index]['rate'] = $rates[$code_to_check];
738:                     $updated_count++;
739:                 }
740:             }
741:         }
742:     
743:         if ($updated_count > 0) {
744:             $options['currencies'] = $all_currencies;
745:             update_option('currify_settings', $options);
746:             update_option('currify_last_cron_run_success', time());
747:         }
748:     }
749: 
750:     private function fetch_and_prepare_rates() {
751:         $options = get_option('currify_settings');
752:         if (empty($options)) {
753:             return new WP_Error('no_settings', __('Plugin settings are not configured.', 'currify-currency-switcher'));
754:         }
755:         
756:         $all_currencies = isset($options['currencies']) ? $options['currencies'] : [];
757:     
758:         if (empty($all_currencies)) {
759:             return new WP_Error('no_currencies', __('No currencies are configured.', 'currify-currency-switcher'));
760:         }
761:     
762:         $has_auto_currencies = false;
763:         foreach ($all_currencies as $currency) {
764:             if (isset($currency['rate_source']) && $currency['rate_source'] === 'automatic') {
765:                 $has_auto_currencies = true;
766:                 break;
767:             }
768:         }
769:     
770:         if (!$has_auto_currencies) {
771:             return new WP_Error('no_auto_currencies', __('No currencies are set to "Automatic" rate source.', 'currify-currency-switcher'));
772:         }
773:     
774:         $api_key = !empty($options['exchangerate_api_key']) ? $options['exchangerate_api_key'] : '';
775:         if (empty($api_key)) {
776:             return new WP_Error('no_api_key', __('API key is missing. Please add your key in the plugin settings.', 'currify-currency-switcher'));
777:         }
778:     
779:         $base_currency = get_option('woocommerce_currency');
780:         $api_url = sprintf('https://v6.exchangerate-api.com/v6/%s/latest/%s', $api_key, $base_currency);
781:         
782:         $response = wp_remote_get($api_url);
783:         if (is_wp_error($response) || wp_remote_retrieve_response_code($response) !== 200) {
784:             return new WP_Error('api_error', __('Failed to fetch data from ExchangeRate-API.com. Please check your API key and server connection.', 'currify-currency-switcher'));
785:         }
786:         
787:         $body = wp_remote_retrieve_body($response);
788:         $data = json_decode($body, true);
789:     
790:         if (!$data || !isset($data['result']) || $data['result'] !== 'success') {
791:             $error_type = isset($data['error-type']) ? esc_html($data['error-type']) : __('unknown_error', 'currify-currency-switcher');
792:             return new WP_Error('api_response_error', sprintf(__('Invalid API response: %s', 'currify-currency-switcher'), $error_type));
793:         }
794:     
795:         return $data['conversion_rates'];
796:     }
797: }
798: ?>

================
File: code_1/includes/class-frontend-logic.txt
================
  1: <?php
  2: 
  3: if ( ! defined( 'ABSPATH' ) ) {
  4:     exit; // Exit if accessed directly.
  5: }
  6: 
  7: class Currify_Frontend_Logic {
  8: 
  9:     public $current_currency;
 10:     public $currencies;
 11:     public $base_currency;
 12:     public $settings;
 13: 
 14:     public function __construct() {
 15:         $this->settings = get_option('currify_settings');
 16:         $this->currencies = []; 
 17:         add_action( 'init', array( $this, 'set_currency' ), 5 );
 18: 
 19:         add_action( 'wp_enqueue_scripts', array( $this, 'enqueue_frontend_scripts' ) );
 20:         add_action( 'wp_head', array($this, 'generate_dynamic_css') );
 21: 
 22:         add_shortcode( 'currify_currency_switcher', array( $this, 'render_switcher_shortcode' ) );
 23:         add_action( 'widgets_init', function() {
 24:             register_widget( 'Currify_Switcher_Widget' );
 25:         });
 26: 
 27:         add_filter( 'woocommerce_get_price_html', array( $this, 'add_price_wrapper' ), 10, 2 );
 28:         add_filter( 'woocommerce_cart_item_price', array( $this, 'add_price_wrapper' ), 10, 2 );
 29:         add_filter( 'woocommerce_cart_item_subtotal', array( $this, 'add_price_wrapper' ), 10, 2 );
 30:         add_filter( 'woocommerce_cart_subtotal', array( $this, 'add_price_wrapper' ), 10, 2 );
 31:         add_filter( 'woocommerce_cart_totals_order_total_html', array( $this, 'add_price_wrapper' ), 10, 1 );
 32:         add_filter( 'woocommerce_shipping_rate_cost_html', array( $this, 'add_price_wrapper' ), 10, 2 );
 33: 
 34:         add_action( 'template_redirect', array( $this, 'conditionally_add_conversion_hooks' ) );
 35:         add_action( 'template_redirect', array( $this, 'maybe_auto_display_switcher' ) );
 36:         
 37:         // Payment gateway filtering
 38:         add_filter( 'woocommerce_available_payment_gateways', array($this, 'filter_payment_gateways') );
 39:     }
 40: 
 41:     public function conditionally_add_conversion_hooks() {
 42:         if ( is_cart() || is_checkout() || is_account_page() || ( defined( 'DOING_AJAX' ) && DOING_AJAX ) ) {
 43:             add_filter('woocommerce_currency', array($this, 'change_currency_symbol'), 9999);
 44:             add_filter('woocommerce_price_format', array($this, 'get_price_format'), 9999);
 45:             add_filter('wc_price_args', array($this, 'get_price_args'), 9999);
 46:             
 47:             add_filter('woocommerce_product_get_price', array($this, 'convert_price'), 9999, 2);
 48:             add_filter('woocommerce_product_get_regular_price', array($this, 'convert_price'), 9999, 2);
 49:             add_filter('woocommerce_product_get_sale_price', array($this, 'convert_price'), 9999, 2);
 50:             
 51:             add_filter('woocommerce_product_variation_get_price', array($this, 'convert_price'), 9999, 2);
 52:             add_filter('woocommerce_product_variation_get_regular_price', array($this, 'convert_price'), 9999, 2);
 53:             add_filter('woocommerce_product_variation_get_sale_price', array($this, 'convert_price'), 9999, 2);
 54:             add_filter( 'woocommerce_variation_prices_price', array( $this, 'convert_price' ), 9999, 2 );
 55:             add_filter( 'woocommerce_variation_prices_regular_price', array( $this, 'convert_price' ), 9999, 2 );
 56:             add_filter( 'woocommerce_variation_prices_sale_price', array( $this, 'convert_price' ), 9999, 2 );
 57:             
 58:             add_filter( 'woocommerce_package_rates', array( $this, 'convert_shipping_rates' ), 9999, 2 );
 59:             add_filter( 'woocommerce_coupon_get_amount', array( $this, 'convert_coupon_amount' ), 9999, 2 );
 60:         }
 61:     }
 62: 
 63:     public function set_currency() {
 64:         $this->base_currency = get_option('woocommerce_currency');
 65:         $all_currencies = ! empty( $this->settings['currencies'] ) && is_array( $this->settings['currencies'] ) ? $this->settings['currencies'] : [];
 66:         
 67:         $unique_currencies = [];
 68:         $base_currency_flag = isset($this->settings['base_currency_meta']['flag']) ? $this->settings['base_currency_meta']['flag'] : '';
 69: 
 70:         $base_svg_path = CURRIFY_PLUGIN_DIR . 'assets/images/symbols/' . strtolower($this->base_currency) . '.svg';
 71:         $base_svg_content = file_exists($base_svg_path) ? file_get_contents($base_svg_path) : '';
 72: 
 73:         $unique_currencies[$this->base_currency] = [
 74:             'code' => $this->base_currency,
 75:             'symbol' => get_woocommerce_currency_symbol($this->base_currency),
 76:             'symbol_svg' => $this->sanitize_svg($base_svg_content),
 77:             'rate' => 1,
 78:             'symbol_pos' => get_option('woocommerce_currency_pos'),
 79:             'thousand_sep' => wc_get_price_thousand_separator(),
 80:             'decimal_sep' => wc_get_price_decimal_separator(),
 81:             'decimals' => wc_get_price_decimals(),
 82:             'flag' => $base_currency_flag
 83:         ];
 84:         foreach ($all_currencies as $currency) {
 85:             if (!empty($currency['code'])) {
 86:                 $svg_path = CURRIFY_PLUGIN_DIR . 'assets/images/symbols/' . strtolower($currency['code']) . '.svg';
 87:                 $currency['symbol_svg'] = file_exists($svg_path) ? $this->sanitize_svg(file_get_contents($svg_path)) : '';
 88:                 $unique_currencies[$currency['code']] = $currency;
 89:             }
 90:         }
 91:         $this->currencies = $unique_currencies;
 92: 
 93:         // --- Currency Detection Logic (using PHP Sessions) ---
 94: 
 95:         // Priority 1: URL Parameter (?cur=...) - This SETS the session variable and redirects.
 96:         if ( isset( $_GET['cur'] ) ) {
 97:             $currency_from_url = sanitize_text_field( wp_unslash( $_GET['cur'] ) );
 98:             if ( $this->is_currency_valid( $currency_from_url ) ) {
 99:                 $_SESSION['currify_currency'] = $currency_from_url;
100:                 // Redirect to remove the query parameter from the URL
101:                 wp_safe_redirect( remove_query_arg('cur') );
102:                 exit;
103:             }
104:         }
105: 
106:         // Priority 2: Existing Session
107:         if ( isset( $_SESSION['currify_currency'] ) && $this->is_currency_valid( $_SESSION['currify_currency'] ) ) {
108:             $this->current_currency = $_SESSION['currify_currency'];
109:             return;
110:         }
111: 
112:         // Priority 3: Geolocation (for new visitors)
113:         if ( !empty($this->settings['geolocation_enable']) && $this->settings['geolocation_enable'] === '1' ) {
114:             $currency_from_ip = $this->get_currency_by_ip();
115:             if ( $currency_from_ip && $this->is_currency_valid( $currency_from_ip ) ) {
116:                 $this->current_currency = $currency_from_ip;
117:                 $_SESSION['currify_currency'] = $this->current_currency;
118:                 return;
119:             }
120:         }
121: 
122:         // Priority 4: Plugin's default currency setting
123:         $plugin_default = !empty($this->settings['default_frontend_currency']) ? $this->settings['default_frontend_currency'] : $this->base_currency;
124:         if ($this->is_currency_valid($plugin_default)) {
125:             $this->current_currency = $plugin_default;
126:         } else {
127:             // Ultimate fallback to base currency
128:             $this->current_currency = $this->base_currency;
129:         }
130:         
131:         // Persist the determined default currency in the session for subsequent page loads.
132:         $_SESSION['currify_currency'] = $this->current_currency;
133:     }
134:     
135:     /**
136:      * Get the real visitor IP address, even behind proxies.
137:      * @return string The visitor's IP address.
138:      */
139:     private function get_visitor_ip() {
140:         $ip_keys = [
141:             'HTTP_CF_CONNECTING_IP', 'HTTP_X_REAL_IP', 'HTTP_CLIENT_IP',
142:             'HTTP_X_FORWARDED_FOR', 'HTTP_X_FORWARDED', 'HTTP_X_CLUSTER_CLIENT_IP',
143:             'HTTP_FORWARDED_FOR', 'HTTP_FORWARDED', 'REMOTE_ADDR'
144:         ];
145:     
146:         foreach ($ip_keys as $key) {
147:             if (isset($_SERVER[$key])) {
148:                 foreach (explode(',', $_SERVER[$key]) as $ip) {
149:                     $ip = trim($ip);
150:                     // Exclude private and reserved IPs
151:                     if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) !== false) {
152:                         return $ip;
153:                     }
154:                 }
155:             }
156:         }
157:         return isset($_SERVER['REMOTE_ADDR']) ? sanitize_text_field(wp_unslash($_SERVER['REMOTE_ADDR'])) : '0.0.0.0';
158:     }
159: 
160:     /**
161:      * Get currency based on visitor's IP. Uses transients for caching.
162:      * @return string|null The detected currency code or null.
163:      */
164:     private function get_currency_by_ip() {
165:         if (isset($_SESSION['currify_geoip_currency'])) {
166:             return $_SESSION['currify_geoip_currency'];
167:         }
168: 
169:         $rules = isset($this->settings['geolocation_rules']) ? $this->settings['geolocation_rules'] : [];
170:         if (empty($rules)) {
171:             $_SESSION['currify_geoip_currency'] = null;
172:             return null;
173:         }
174: 
175:         $visitor_ip = $this->get_visitor_ip();
176:         $transient_key = 'currify_ip_' . md5($visitor_ip);
177:         $country_code = get_transient($transient_key);
178: 
179:         if (false === $country_code) {
180:             $api_url = 'https://ip-api.com/json/' . $visitor_ip;
181:             $response = wp_remote_get($api_url, ['timeout' => 2]); // Use HTTPS and add timeout
182: 
183:             if (is_wp_error($response) || wp_remote_retrieve_response_code($response) !== 200) {
184:                 $_SESSION['currify_geoip_currency'] = null;
185:                 return null;
186:             }
187: 
188:             $data = json_decode(wp_remote_retrieve_body($response), true);
189: 
190:             if (isset($data['status']) && $data['status'] === 'success' && isset($data['countryCode'])) {
191:                 $country_code = sanitize_text_field($data['countryCode']);
192:                 set_transient($transient_key, $country_code, 24 * HOUR_IN_SECONDS); // Cache for 24 hours
193:             } else {
194:                 // If API fails, cache an empty value for a shorter period to prevent repeated failed calls
195:                 set_transient($transient_key, 'failed', 5 * MINUTE_IN_SECONDS);
196:                 $_SESSION['currify_geoip_currency'] = null;
197:                 return null;
198:             }
199:         }
200:         
201:         if ($country_code && $country_code !== 'failed') {
202:             foreach ($rules as $rule) {
203:                 if (!empty($rule['countries']) && in_array($country_code, $rule['countries'])) {
204:                     $currency = $rule['currency'];
205:                     $_SESSION['currify_geoip_currency'] = $currency;
206:                     return $currency;
207:                 }
208:             }
209:         }
210: 
211:         $_SESSION['currify_geoip_currency'] = null;
212:         return null;
213:     }
214:     
215:     private function is_currency_valid($code) {
216:         return isset($this->currencies[$code]);
217:     }
218:     
219:     private function get_allowed_svg_tags() {
220:         return array(
221:             'svg' => array( 'xmlns' => true, 'viewbox' => true, 'width' => true, 'height' => true, 'fill' => true, 'aria-hidden' => true, 'focusable' => true, 'role' => true ),
222:             'path' => array( 'd' => true, 'fill' => true, 'stroke' => true, 'stroke-width' => true, 'fill-rule' => true, 'clip-rule' => true ),
223:             'g' => array( 'fill' => true ),
224:             'rect' => array('x' => true, 'y' => true, 'width' => true, 'height' => true, 'fill' => true),
225:             'circle' => array('cx' => true, 'cy' => true, 'r' => true, 'fill' => true),
226:         );
227:     }
228:     
229:     private function sanitize_svg($svg_content) {
230:         if (empty($svg_content)) return '';
231:         return wp_kses($svg_content, $this->get_allowed_svg_tags());
232:     }
233: 
234:     public function enqueue_frontend_scripts() {
235:         wp_enqueue_style( 'currify-frontend-css', CURRIFY_PLUGIN_URL . 'assets/css/frontend.css', array(), CURRIFY_VERSION );
236:         wp_enqueue_script( 'currify-frontend-js', CURRIFY_PLUGIN_URL . 'assets/js/frontend.js', array( 'jquery' ), CURRIFY_VERSION, true );
237:         
238:         $current_currency = isset($_SESSION['currify_currency']) ? $_SESSION['currify_currency'] : $this->base_currency;
239: 
240:         wp_localize_script( 'currify-frontend-js', 'currify_front', array(
241:             'ajax_url' => admin_url( 'admin-ajax.php' ),
242:             'nonce' => wp_create_nonce( 'currify-front-nonce' ),
243:             'base_currency' => $this->base_currency,
244:             'current_currency' => $current_currency,
245:             'currencies' => $this->currencies,
246:             'is_shop_manager' => current_user_can('manage_woocommerce'),
247:         ) );
248:     }
249: 
250:     public function render_switcher_shortcode( $atts = [] ) {
251:         $atts = shortcode_atts(
252:             [
253:                 'style' => '',
254:             ],
255:             $atts,
256:             'currify_currency_switcher'
257:         );
258: 
259:         if ( empty( $this->currencies ) || count( $this->currencies ) <= 1 ) {
260:             return '';
261:         }
262:     
263:         $style = !empty($atts['style']) && $atts['style'] !== 'default' ? $atts['style'] : ($this->settings['switcher_style'] ?? 'dropdown-classic');
264:         $columns = (int) ( $this->settings['switcher_grid_columns'] ?? 1 );
265:         $rows = (int) ( $this->settings['switcher_max_visible_rows'] ?? 0 );
266:         
267:         ob_start();
268:         
269:         $container_classes = "currify-switcher-container currify-style-{$style}";
270:         $style_vars = '';
271: 
272:         if ($columns > 1) {
273:             $container_classes .= " currify-grid-view";
274:             $style_vars .= "--currify-grid-columns: " . esc_attr($columns) . ";";
275:         }
276:         if ($rows > 0) {
277:             $container_classes .= " currify-row-limit-view";
278:             $style_vars .= "--currify-max-rows: " . esc_attr($rows) . ";";
279:         }
280:         ?>
281:         <div class="<?php echo esc_attr($container_classes); ?>" style="<?php echo esc_attr($style_vars); ?>">
282:             <?php
283:             // Render different HTML based on the selected style
284:             switch ($style) {
285:                 case 'pills-horizontal':
286:                     $this->render_pills_style();
287:                     break;
288:                 case 'flags-horizontal':
289:                     $this->render_flags_style();
290:                     break;
291:                 case 'list-vertical':
292:                 case 'list-horizontal':
293:                      $this->render_list_style();
294:                     break;
295:                 case 'dropdown-horizontal':
296:                     $this->render_dropdown_horizontal_style();
297:                     break;
298:                 case 'dropdown-classic':
299:                 default:
300:                     $this->render_dropdown_style();
301:                     break;
302:             }
303:             ?>
304:         </div>
305:         <?php
306:         return ob_get_clean();
307:     }
308:     
309:     private function render_dropdown_style() {
310:         $current_currency_data = $this->get_currency_data( $this->current_currency );
311:         ?>
312:         <div class="currify-active-currency">
313:             <?php if ( ! empty( $current_currency_data['flag'] ) ) : ?>
314:                 <img src="<?php echo esc_url( $current_currency_data['flag'] ); ?>" alt="<?php echo esc_attr( $current_currency_data['code'] ); ?>" class="currify-flag">
315:             <?php endif; ?>
316:             <span><?php echo esc_html( $current_currency_data['code'] ); ?></span>
317:             <span class="currify-arrow">&#9662;</span>
318:         </div>
319:         <div class="currify-currency-list">
320:              <ul>
321:                 <?php foreach ( $this->currencies as $currency_code => $currency_data ) : ?>
322:                     <?php if ( $currency_code === $this->current_currency ) continue; ?>
323:                     <li>
324:                         <a href="<?php echo esc_url(add_query_arg('cur', $currency_code)); ?>" class="currify-currency-link">
325:                             <?php if ( ! empty( $currency_data['flag'] ) ) : ?>
326:                                 <img src="<?php echo esc_url( $currency_data['flag'] ); ?>" alt="<?php echo esc_attr( $currency_code ); ?>" class="currify-flag">
327:                             <?php endif; ?>
328:                             <span><?php echo esc_html( $currency_code ); ?></span>
329:                         </a>
330:                     </li>
331:                 <?php endforeach; ?>
332:             </ul>
333:         </div>
334:         <?php
335:     }
336: 
337:     private function render_dropdown_horizontal_style() {
338:         $current_currency_data = $this->get_currency_data( $this->current_currency );
339:         ?>
340:         <div class="currify-active-currency">
341:             <?php if ( ! empty( $current_currency_data['flag'] ) ) : ?>
342:                 <img src="<?php echo esc_url( $current_currency_data['flag'] ); ?>" alt="<?php echo esc_attr( $current_currency_data['code'] ); ?>" class="currify-flag">
343:             <?php endif; ?>
344:             <span><?php echo esc_html( $current_currency_data['code'] ); ?></span>
345:             <span class="currify-arrow">&#9656;</span>
346:         </div>
347:         <div class="currify-currency-list">
348:              <ul>
349:                 <?php foreach ( $this->currencies as $currency_code => $currency_data ) : ?>
350:                     <li>
351:                         <a href="<?php echo esc_url(add_query_arg('cur', $currency_code)); ?>" class="currify-currency-link <?php echo ($currency_code === $this->current_currency) ? 'is-active' : ''; ?>">
352:                             <?php if ( ! empty( $currency_data['flag'] ) ) : ?>
353:                                 <img src="<?php echo esc_url( $currency_data['flag'] ); ?>" alt="<?php echo esc_attr( $currency_code ); ?>" class="currify-flag">
354:                             <?php endif; ?>
355:                             <span><?php echo esc_html( $currency_code ); ?></span>
356:                         </a>
357:                     </li>
358:                 <?php endforeach; ?>
359:             </ul>
360:         </div>
361:         <?php
362:     }
363: 
364:     private function render_pills_style() {
365:         ?>
366:         <div class="currify-pills-list">
367:             <?php foreach ( $this->currencies as $currency_code => $currency_data ) : ?>
368:                 <?php $is_active = ($currency_code === $this->current_currency); ?>
369:                 <a href="<?php echo esc_url(add_query_arg('cur', $currency_code)); ?>" class="currify-pill-item <?php echo $is_active ? 'is-active' : ''; ?>">
370:                     <?php if ( ! empty( $currency_data['flag'] ) ) : ?>
371:                         <img src="<?php echo esc_url( $currency_data['flag'] ); ?>" alt="<?php echo esc_attr( $currency_code ); ?>" class="currify-flag">
372:                     <?php endif; ?>
373:                     <span><?php echo esc_html( $currency_code ); ?></span>
374:                 </a>
375:             <?php endforeach; ?>
376:         </div>
377:         <?php
378:     }
379: 
380:     private function render_flags_style() {
381:         ?>
382:         <div class="currify-flags-list">
383:             <?php foreach ( $this->currencies as $currency_code => $currency_data ) : ?>
384:                 <?php if ( empty( $currency_data['flag'] ) ) continue; ?>
385:                 <?php $is_active = ($currency_code === $this->current_currency); ?>
386:                 <a href="<?php echo esc_url(add_query_arg('cur', $currency_code)); ?>" class="currify-flag-item <?php echo $is_active ? 'is-active' : ''; ?>" title="<?php echo esc_attr($currency_code); ?>">
387:                     <img src="<?php echo esc_url( $currency_data['flag'] ); ?>" alt="<?php echo esc_attr( $currency_code ); ?>" class="currify-flag">
388:                 </a>
389:             <?php endforeach; ?>
390:         </div>
391:         <?php
392:     }
393: 
394:     private function render_list_style() {
395:         ?>
396:         <ul class="currify-list">
397:             <?php foreach ( $this->currencies as $currency_code => $currency_data ) : ?>
398:                  <?php $is_active = ($currency_code === $this->current_currency); ?>
399:                 <li>
400:                     <a href="<?php echo esc_url(add_query_arg('cur', $currency_code)); ?>" class="currify-list-item <?php echo $is_active ? 'is-active' : ''; ?>">
401:                         <?php if ( ! empty( $currency_data['flag'] ) ) : ?>
402:                             <img src="<?php echo esc_url( $currency_data['flag'] ); ?>" alt="<?php echo esc_attr( $currency_code ); ?>" class="currify-flag">
403:                         <?php endif; ?>
404:                         <span><?php echo esc_html( $currency_code ); ?></span>
405:                     </a>
406:                 </li>
407:             <?php endforeach; ?>
408:         </ul>
409:         <?php
410:     }
411:     
412:     public function add_price_wrapper($price_html, $product = null) {
413:         if (is_admin() || empty($price_html) || strpos($price_html, 'currify-price') !== false) {
414:             return $price_html;
415:         }
416: 
417:         $base_price = 0;
418:         $product_id = 0;
419: 
420:         if ($product instanceof WC_Product) {
421:             $product_id = $product->get_id();
422:             $base_price = $product->get_price('edit');
423:         } elseif (is_numeric($product)) { // Handle cases where only product ID is passed
424:              $product_obj = wc_get_product($product);
425:              if ($product_obj) {
426:                 $product_id = $product_obj->get_id();
427:                 $base_price = $product_obj->get_price('edit');
428:              }
429:         } elseif ($product instanceof WC_Shipping_Rate) {
430:             $base_price = $product->get_cost();
431:         } elseif (is_array($product) && isset($product['line_total'])) { // Cart item
432:              $product_id = $product['product_id'];
433:              $base_price = $product['line_total'] / $product['quantity'];
434:         } else {
435:              $base_price = wc_format_decimal( strip_tags( $price_html ), wc_get_price_decimals() );
436:         }
437:         
438:         // Check if switching is disabled for this product
439:         if ( $product_id > 0 && get_post_meta($product_id, '_currify_disable_switching', true) === 'yes' ) {
440:             return $price_html;
441:         }
442: 
443:         return '<span class="currify-price" data-price="' . esc_attr($base_price) . '">' . $price_html . '</span>';
444:     }
445:     
446:     public function convert_price( $price, $product = null ) {
447:         if (empty($price) || !is_numeric($price) || $this->current_currency === $this->base_currency) {
448:             return $price;
449:         }
450:         
451:         if ($product instanceof WC_Product) {
452:              // Check if switching is disabled for this product
453:             if ( get_post_meta($product->get_id(), '_currify_disable_switching', true) === 'yes' ) {
454:                 return $price;
455:             }
456: 
457:             $fixed_price = get_post_meta($product->get_id(), '_currify_fixed_price_' . $this->current_currency, true);
458:             $fixed_sale_price = get_post_meta($product->get_id(), '_currify_fixed_sale_price_' . $this->current_currency, true);
459: 
460:             if ($product->is_on_sale() && $fixed_sale_price !== '' && is_numeric($fixed_sale_price)) return $fixed_sale_price;
461:             if ($fixed_price !== '' && is_numeric($fixed_price)) return $fixed_price;
462:         }
463: 
464:         $currency_data = $this->get_currency_data($this->current_currency);
465:         if ($currency_data && isset($currency_data['rate'])) {
466:             return floatval($price) * floatval($currency_data['rate']);
467:         }
468: 
469:         return $price;
470:     }
471: 
472:     public function convert_shipping_rates($rates, $package) {
473:         if ($this->current_currency === $this->base_currency) return $rates;
474:         
475:         $currency_data = $this->get_currency_data($this->current_currency);
476:         if ($currency_data && isset($currency_data['rate'])) {
477:             foreach ($rates as $rate) {
478:                 $rate->set_cost($rate->get_cost() * $currency_data['rate']);
479:                 $taxes = array_map(function($tax) use ($currency_data) { return $tax * $currency_data['rate']; }, $rate->get_taxes());
480:                 $rate->set_taxes($taxes);
481:             }
482:         }
483:         return $rates;
484:     }
485:     
486:     public function convert_coupon_amount($amount, $coupon) {
487:         if ($this->current_currency === $this->base_currency || $coupon->is_type('percent')) return $amount;
488:         
489:         $currency_data = $this->get_currency_data($this->current_currency);
490:         if ($currency_data && isset($currency_data['rate'])) {
491:             return $amount * $currency_data['rate'];
492:         }
493:         return $amount;
494:     }
495:     
496:     public function filter_payment_gateways($gateways) {
497:         $rules = isset($this->settings['payment_gateway_rules']) ? $this->settings['payment_gateway_rules'] : [];
498:         if (empty($rules)) {
499:             return $gateways;
500:         }
501: 
502:         foreach ($gateways as $gateway_id => $gateway) {
503:             // If rules exist for this gateway and those rules are not empty
504:             if (isset($rules[$gateway_id]['currencies']) && !empty($rules[$gateway_id]['currencies'])) {
505:                 // If the current currency is NOT in the list of allowed currencies for this gateway, remove it.
506:                 if (!in_array($this->current_currency, $rules[$gateway_id]['currencies'])) {
507:                     unset($gateways[$gateway_id]);
508:                 }
509:             }
510:         }
511:         return $gateways;
512:     }
513:     
514:     public function change_currency_symbol($symbol) {
515:         $currency_data = $this->get_currency_data($this->current_currency);
516:         if ( ! empty( $currency_data['symbol_svg'] ) ) return $currency_data['symbol_svg'];
517:         return $currency_data['symbol'] ?? $symbol;
518:     }
519: 
520:     public function get_price_format($format) {
521:         $currency_data = $this->get_currency_data($this->current_currency);
522:         $pos = $currency_data['symbol_pos'] ?? get_option('woocommerce_currency_pos');
523:         
524:         switch ($pos) {
525:             case 'left_space': return '%1$s&nbsp;%2$s';
526:             case 'right': return '%2$s%1$s';
527:             case 'right_space': return '%2$s&nbsp;%1$s';
528:             case 'left':
529:             default: return '%1$s%2$s';
530:         }
531:     }
532: 
533:     public function get_price_args($args) {
534:         $currency_data = $this->get_currency_data($this->current_currency);
535:         if ($currency_data) {
536:             $args['thousand_separator'] = $currency_data['thousand_sep'];
537:             $args['decimal_separator'] = $currency_data['decimal_sep'];
538:             $args['decimals'] = $currency_data['decimals'];
539:         }
540:         return $args;
541:     }
542: 
543:     public function get_currency_data($code) {
544:         return $this->currencies[$code] ?? null;
545:     }
546:     
547:     public function maybe_auto_display_switcher() {
548:         $locations = $this->settings['global_display_locations'] ?? [];
549:         if (isset($locations['main_nav'])) {
550:             add_filter('wp_nav_menu_items', array($this, 'add_switcher_to_nav_menu'), 10, 2);
551:         }
552:         if (isset($locations['shop_loop'])) {
553:             add_action('woocommerce_before_shop_loop', array($this, 'render_switcher_shortcode_action'), 5);
554:         }
555: 
556:         if (is_product()) {
557:             $product_location = $this->settings['product_page_location'] ?? 'disabled';
558:             $hook_map = [
559:                 'before_title' => ['woocommerce_single_product_summary', 4],
560:                 'after_title' => ['woocommerce_single_product_summary', 6],
561:                 'after_price' => ['woocommerce_single_product_summary', 11],
562:                 'after_add_to_cart' => ['woocommerce_single_product_summary', 31],
563:             ];
564:             if ($product_location !== 'disabled' && isset($hook_map[$product_location])) {
565:                 list($hook, $priority) = $hook_map[$product_location];
566:                 add_action($hook, array($this, 'render_product_page_switcher'), $priority);
567:             }
568:         }
569:     }
570: 
571:     public function render_switcher_shortcode_action() {
572:         echo $this->render_switcher_shortcode();
573:     }
574: 
575:     public function render_product_page_switcher() {
576:         $style = $this->settings['product_page_switcher_style'] ?? 'default';
577:         echo $this->render_switcher_shortcode(['style' => $style]);
578:     }
579: 
580:     public function add_switcher_to_nav_menu($items, $args) {
581:         $primary_locations = ['primary', 'main_menu', 'header_menu', 'main-navigation']; // Common theme location slugs
582:         if (in_array($args->theme_location, $primary_locations)) {
583:             $switcher_html = do_shortcode('[currify_currency_switcher]');
584:             $items .= '<li class="menu-item currify-nav-menu-item">' . $switcher_html . '</li>';
585:         }
586:         return $items;
587:     }
588:     
589:     public function generate_dynamic_css() {
590:         $primary_color = $this->settings['switcher_primary_color'] ?? '#0073aa';
591:         $bg_color = $this->settings['switcher_background_color'] ?? '#fafafa';
592:         
593:         if (empty($primary_color) && empty($bg_color)) {
594:             return;
595:         }
596:         
597:         ob_start();
598:         ?>
599:         <style id="currify-dynamic-styles">
600:             :root {
601:                 --currify-primary-color: <?php echo esc_attr($primary_color); ?>;
602:                 --currify-background-color: <?php echo esc_attr($bg_color); ?>;
603:             }
604:         </style>
605:         <?php
606:         echo ob_get_clean();
607:     }
608: }
609: 
610: // Widget Class
611: class Currify_Switcher_Widget extends WP_Widget {
612:     public function __construct() {
613:         parent::__construct(
614:             'currify_switcher_widget',
615:             __( 'Currify Currency Switcher', 'currify-currency-switcher' ),
616:             array( 'description' => __( 'Displays a currency switcher dropdown.', 'currify-currency-switcher' ) )
617:         );
618:     }
619:     public function widget( $args, $instance ) {
620:         echo $args['before_widget'];
621:         if ( ! empty( $instance['title'] ) ) {
622:             echo $args['before_title'] . apply_filters( 'widget_title', $instance['title'] ) . $args['after_title'];
623:         }
624:         echo do_shortcode('[currify_currency_switcher]');
625:         echo $args['after_widget'];
626:     }
627:     public function form( $instance ) {
628:         $title = ! empty( $instance['title'] ) ? $instance['title'] : esc_html__( 'Currency', 'currify-currency-switcher' );
629:         ?>
630:         <p>
631:             <label for="<?php echo esc_attr( $this->get_field_id( 'title' ) ); ?>"><?php esc_attr_e( 'Title:', 'currify-currency-switcher' ); ?></label>
632:             <input class="widefat" id="<?php echo esc_attr( $this->get_field_id( 'title' ) ); ?>" name="<?php echo esc_attr( $this->get_field_name( 'title' ) ); ?>" type="text" value="<?php echo esc_attr( $title ); ?>">
633:         </p>
634:         <?php
635:     }
636:     public function update( $new_instance, $old_instance ) {
637:         $instance = array();
638:         $instance['title'] = ( ! empty( $new_instance['title'] ) ) ? sanitize_text_field( $new_instance['title'] ) : '';
639:         return $instance;
640:     }
641: }

================
File: code_1/includes/class-order-meta.txt
================
  1: <?php
  2: 
  3: if ( ! defined( 'ABSPATH' ) ) {
  4:     exit; // Exit if accessed directly.
  5: }
  6: 
  7: class Currify_Order_Meta {
  8: 
  9:     private $frontend_logic;
 10: 
 11:     public function __construct( $frontend_logic ) {
 12:         $this->frontend_logic = $frontend_logic;
 13: 
 14:         // Register custom order status
 15:         add_action( 'init', array( $this, 'register_partially_paid_order_status' ) );
 16:         add_filter( 'wc_order_statuses', array( $this, 'add_partially_paid_to_order_statuses' ) );
 17: 
 18:         // Save currency data to order
 19:         add_action( 'woocommerce_checkout_create_order', array( $this, 'save_currency_meta_on_checkout' ), 10, 2 );
 20: 
 21:         // Display currency data in admin
 22:         add_action( 'woocommerce_admin_order_data_after_billing_address', array( $this, 'display_currency_meta_in_admin' ), 10, 1 );
 23: 
 24:         // Add payment management meta box
 25:         add_action( 'add_meta_boxes', array( $this, 'add_payment_management_meta_box' ) );
 26:         add_action( 'save_post_shop_order', array( $this, 'save_payment_management_meta_box' ) );
 27: 
 28:         // Add currency info to emails
 29:         add_action( 'woocommerce_email_order_meta', array( $this, 'add_currency_info_to_emails' ), 20, 3 );
 30:     }
 31: 
 32:     public function register_partially_paid_order_status() {
 33:         register_post_status( 'wc-partially-paid', array(
 34:             'label'                     => _x( 'Partially Paid', 'Order status', 'currify-currency-switcher' ),
 35:             'public'                    => true,
 36:             'exclude_from_search'       => false,
 37:             'show_in_admin_all_list'    => true,
 38:             'show_in_admin_status_list' => true,
 39:             'label_count'               => _n_noop( 'Partially Paid <span class="count">(%s)</span>', 'Partially Paid <span class="count">(%s)</span>', 'currify-currency-switcher' )
 40:         ) );
 41:     }
 42: 
 43:     public function add_partially_paid_to_order_statuses( $order_statuses ) {
 44:         $new_order_statuses = array();
 45:         foreach ( $order_statuses as $key => $status ) {
 46:             $new_order_statuses[ $key ] = $status;
 47:             if ( 'wc-processing' === $key ) {
 48:                 $new_order_statuses['wc-partially-paid'] = _x( 'Partially Paid', 'Order status', 'currify-currency-switcher' );
 49:             }
 50:         }
 51:         return $new_order_statuses;
 52:     }
 53: 
 54:     public function save_currency_meta_on_checkout( $order, $data ) {
 55:         // Use the injected frontend_logic instance which is already initialized
 56:         if ( $this->frontend_logic->current_currency ) {
 57:             $currency_code = $this->frontend_logic->current_currency;
 58:             $currency_data = $this->frontend_logic->get_currency_data($currency_code);
 59:             $base_currency = $this->frontend_logic->base_currency;
 60: 
 61:             if ( $currency_code !== $base_currency && $currency_data) {
 62:                 $rate = $currency_data['rate'];
 63:                 $order_total = $order->get_total();
 64:                 // Ensure rate is not zero to prevent division by zero error
 65:                 $base_total = $rate > 0 ? $order_total / $rate : $order_total;
 66: 
 67:                 $order->update_meta_data( '_order_currency', $currency_code );
 68:                 $order->update_meta_data( '_base_currency', $base_currency );
 69:                 $order->update_meta_data( '_currency_exchange_rate', $rate );
 70:                 $order->update_meta_data( '_order_total_in_base_currency', $base_total );
 71:             }
 72:         }
 73:     }
 74: 
 75:     public function display_currency_meta_in_admin( $order ) {
 76:         $order_currency = $order->get_meta( '_order_currency' );
 77:         if ( ! $order_currency ) {
 78:             return;
 79:         }
 80: 
 81:         $rate = $order->get_meta( '_currency_exchange_rate' );
 82:         $base_currency = $order->get_meta( '_base_currency' );
 83:         $base_total = $order->get_meta( '_order_total_in_base_currency' );
 84: 
 85:         echo '<div class="order_data_column">';
 86:         echo '<h4>' . esc_html__( 'Currency Information', 'currify-currency-switcher' ) . '</h4>';
 87:         echo '<p><strong>' . esc_html__( 'Payment Currency:', 'currify-currency-switcher' ) . '</strong> ' . esc_html( $order_currency ) . '</p>';
 88:         echo '<p><strong>' . esc_html__( 'Exchange Rate:', 'currify-currency-switcher' ) . '</strong> ' . esc_html( $rate ) . '</p>';
 89:         echo '<p><strong>' . esc_html__( 'Base Currency Total:', 'currify-currency-switcher' ) . '</strong> ' . wc_price( $base_total, array('currency' => $base_currency) ) . '</p>';
 90:         echo '</div>';
 91:     }
 92: 
 93:     public function add_payment_management_meta_box() {
 94:         global $post;
 95:         $order = wc_get_order($post->ID);
 96:         if ($order && $order->has_status('partially-paid')) {
 97:             add_meta_box(
 98:                 'currify-payment-management',
 99:                 __( 'Payment Management', 'currify-currency-switcher' ),
100:                 array( $this, 'render_payment_management_meta_box' ),
101:                 'shop_order',
102:                 'normal',
103:                 'high'
104:             );
105:         }
106:     }
107: 
108:     public function render_payment_management_meta_box( $post ) {
109:         wp_nonce_field( 'currify_save_payment_meta', 'currify_payment_nonce' );
110:         
111:         $order = wc_get_order($post->ID);
112:         $base_currency = $order->get_meta('_base_currency') ? $order->get_meta('_base_currency') : $order->get_currency();
113:         $total_debt = $order->get_meta('_order_total_in_base_currency') ? $order->get_meta('_order_total_in_base_currency') : $order->get_total();
114:         
115:         $payments = $order->get_meta('_currify_payments') ?: array();
116:         $total_paid = 0;
117:         foreach ($payments as $payment) {
118:             $total_paid += floatval($payment['amount_base']);
119:         }
120:         $remaining_balance = $total_debt - $total_paid;
121:         
122:         ?>
123:         <div style="padding: 10px;">
124:             <h3><?php esc_html_e('Payment Status', 'currify-currency-switcher'); ?></h3>
125:             <p><strong><?php esc_html_e('Total Debt:', 'currify-currency-switcher'); ?></strong> <?php echo wc_price($total_debt, ['currency' => $base_currency]); ?></p>
126:             <p><strong><?php esc_html_e('Remaining Balance:', 'currify-currency-switcher'); ?></strong> <span style="color:red; font-weight:bold;"><?php echo wc_price($remaining_balance, ['currency' => $base_currency]); ?></span></p>
127:             
128:             <hr>
129:             
130:             <h3><?php esc_html_e('Add New Payment', 'currify-currency-switcher'); ?></h3>
131:             <p>
132:                 <label for="new_payment_amount"><?php esc_html_e('Payment Amount', 'currify-currency-switcher'); ?></label><br>
133:                 <input type="text" id="new_payment_amount" name="currify_new_payment[amount]" class="wc_input_price" />
134:             </p>
135:             <p>
136:                 <label for="new_payment_currency"><?php esc_html_e('Payment Currency', 'currify-currency-switcher'); ?></label><br>
137:                 <input type="text" id="new_payment_currency" name="currify_new_payment[currency]" placeholder="<?php echo esc_attr($base_currency); ?>"/>
138:             </p>
139:              <p>
140:                 <label for="new_payment_rate"><?php esc_html_e('Exchange Rate for Today', 'currify-currency-switcher'); ?></label><br>
141:                 <input type="text" id="new_payment_rate" name="currify_new_payment[rate]" class="wc_input_decimal" placeholder="1.0" />
142:             </p>
143:             <p>
144:                 <label for="new_payment_note"><?php esc_html_e('Payment Note', 'currify-currency-switcher'); ?></label><br>
145:                 <textarea id="new_payment_note" name="currify_new_payment[note]" rows="3" style="width:100%;"></textarea>
146:             </p>
147: 
148:             <hr>
149:             
150:             <h3><?php esc_html_e('Payment History', 'currify-currency-switcher'); ?></h3>
151:             <table class="widefat fixed">
152:                 <thead>
153:                     <tr>
154:                         <th><?php esc_html_e('Date', 'currify-currency-switcher'); ?></th>
155:                         <th><?php esc_html_e('Amount Paid', 'currify-currency-switcher'); ?></th>
156:                         <th><?php esc_html_e('Equivalent in Base', 'currify-currency-switcher'); ?></th>
157:                         <th><?php esc_html_e('Note', 'currify-currency-switcher'); ?></th>
158:                     </tr>
159:                 </thead>
160:                 <tbody>
161:                     <?php if (empty($payments)): ?>
162:                     <tr><td colspan="4"><?php esc_html_e('No payments recorded yet.', 'currify-currency-switcher'); ?></td></tr>
163:                     <?php else: foreach ($payments as $payment): ?>
164:                     <tr>
165:                         <td><?php echo esc_html(date_i18n(get_option('date_format'), $payment['date'])); ?></td>
166:                         <td><?php echo wc_price($payment['amount'], ['currency' => $payment['currency']]); ?></td>
167:                         <td><?php echo wc_price($payment['amount_base'], ['currency' => $base_currency]); ?></td>
168:                         <td><?php echo esc_html($payment['note']); ?></td>
169:                     </tr>
170:                     <?php endforeach; endif; ?>
171:                 </tbody>
172:             </table>
173:         </div>
174:         <?php
175:     }
176: 
177:     public function save_payment_management_meta_box( $post_id ) {
178:         if (!isset($_POST['currify_payment_nonce']) || !wp_verify_nonce(sanitize_key($_POST['currify_payment_nonce']), 'currify_save_payment_meta')) {
179:             return;
180:         }
181:         if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
182:             return;
183:         }
184:         if (!current_user_can('edit_shop_order', $post_id)) {
185:             return;
186:         }
187: 
188:         if (isset($_POST['currify_new_payment']) && !empty($_POST['currify_new_payment']['amount'])) {
189:             // Sanitize input with more specific functions
190:             $new_payment = [
191:                 'amount'   => isset($_POST['currify_new_payment']['amount']) ? wc_format_decimal(sanitize_text_field($_POST['currify_new_payment']['amount'])) : 0,
192:                 'currency' => isset($_POST['currify_new_payment']['currency']) ? sanitize_text_field($_POST['currify_new_payment']['currency']) : '',
193:                 'rate'     => isset($_POST['currify_new_payment']['rate']) ? wc_format_decimal(sanitize_text_field($_POST['currify_new_payment']['rate'])) : 1.0,
194:                 'note'     => isset($_POST['currify_new_payment']['note']) ? sanitize_textarea_field($_POST['currify_new_payment']['note']) : '',
195:             ];
196: 
197:             if (empty($new_payment['amount'])) {
198:                 return; // Don't save if amount is zero or empty after sanitization
199:             }
200:             
201:             $order = wc_get_order($post_id);
202:             $payments = $order->get_meta('_currify_payments') ?: array();
203:             
204:             // Prevent division by zero error
205:             $rate = !empty($new_payment['rate']) ? floatval($new_payment['rate']) : 1.0;
206:             $rate = ($rate == 0) ? 1.0 : $rate;
207:             $amount_base = floatval($new_payment['amount']) / $rate;
208:             
209:             $payments[] = [
210:                 'date'        => time(),
211:                 'amount'      => $new_payment['amount'],
212:                 'currency'    => $new_payment['currency'],
213:                 'rate'        => $rate,
214:                 'amount_base' => $amount_base,
215:                 'note'        => $new_payment['note'],
216:             ];
217: 
218:             $order->update_meta_data('_currify_payments', $payments);
219:             $order->add_order_note(sprintf(
220:                 __('New payment added: %s. Remaining balance updated.', 'currify-currency-switcher'),
221:                 wc_price($new_payment['amount'], ['currency' => $new_payment['currency']])
222:             ));
223:             
224:             // Check if order is fully paid now
225:             $total_debt = $order->get_meta('_order_total_in_base_currency') ? $order->get_meta('_order_total_in_base_currency') : $order->get_total();
226:             $total_paid = 0;
227:             foreach ($payments as $p) { $total_paid += $p['amount_base']; }
228:             
229:             if ($total_paid >= $total_debt) {
230:                 $order->update_status('completed', __('Order fully paid.', 'currify-currency-switcher'));
231:             }
232: 
233:             $order->save();
234:         }
235:     }
236: 
237:     public function add_currency_info_to_emails( $order, $sent_to_admin, $plain_text ) {
238:         $order_currency = $order->get_meta('_order_currency');
239:         if (!$order_currency) return;
240:         
241:         $base_currency = $order->get_meta('_base_currency');
242:         $rate = $order->get_meta('_currency_exchange_rate');
243:         $base_total = $order->get_meta('_order_total_in_base_currency');
244: 
245:         echo '<h2>' . esc_html__('Currency Information', 'currify-currency-switcher') . '</h2>';
246:         echo '<p><strong>' . esc_html__('Payment Currency:', 'currify-currency-switcher') . '</strong> ' . esc_html($order_currency) . '</p>';
247:         echo '<p><strong>' . esc_html__('Exchange Rate:', 'currify-currency-switcher') . '</strong> ' . esc_html($rate) . '</p>';
248:         echo '<p><strong>' . esc_html__('Equivalent Total in Base Currency:', 'currify-currency-switcher') . '</strong> ' . wc_price($base_total, array('currency' => $base_currency)) . '</p>';
249: 
250:         if ($order->has_status('partially-paid')) {
251:             $payments = $order->get_meta('_currify_payments') ?: [];
252:             $total_paid = array_sum(wp_list_pluck($payments, 'amount_base'));
253:             $remaining_balance = $base_total - $total_paid;
254: 
255:             echo '<hr>';
256:             echo '<p><strong>' . esc_html__('Total Order Value:', 'currify-currency-switcher') . '</strong> ' . wc_price($base_total, array('currency' => $base_currency)) . '</p>';
257:             echo '<p><strong>' . esc_html__('Total Paid to Date:', 'currify-currency-switcher') . '</strong> ' . wc_price($total_paid, array('currency' => $base_currency)) . '</p>';
258:             echo '<p><strong>' . esc_html__('Remaining Balance:', 'currify-currency-switcher') . '</strong> ' . wc_price($remaining_balance, array('currency' => $base_currency)) . '</p>';
259:         }
260:     }
261: }

================
File: code_1/includes/class-product-meta.txt
================
  1: <?php
  2: 
  3: if ( ! defined( 'ABSPATH' ) ) {
  4:     exit; // Exit if accessed directly.
  5: }
  6: 
  7: class Currify_Product_Meta {
  8: 
  9:     public function __construct() {
 10:         // Add product data tab
 11:         add_filter( 'woocommerce_product_data_tabs', array( $this, 'add_currify_product_tab' ) );
 12:         add_action( 'woocommerce_product_data_panels', array( $this, 'currify_product_tab_content' ) );
 13:         add_action( 'woocommerce_process_product_meta', array( $this, 'save_currify_product_meta' ) );
 14: 
 15:         // Admin bargain price field
 16:         add_action( 'woocommerce_before_add_to_cart_button', array( $this, 'display_admin_bargain_field' ), 25 );
 17:         add_filter( 'woocommerce_add_cart_item_data', array( $this, 'save_bargain_price_to_cart' ), 10, 3 );
 18:         add_filter( 'woocommerce_get_item_data', array( $this, 'display_bargain_price_in_cart' ), 10, 2 );
 19:         add_action( 'woocommerce_checkout_create_order_line_item', array( $this, 'save_bargain_price_to_order_item' ), 10, 4 );
 20:     }
 21: 
 22:     public function add_currify_product_tab( $tabs ) {
 23:         $tabs['currify'] = array(
 24:             'label'    => __( 'Currify Pricing', 'currify-currency-switcher' ),
 25:             'target'   => 'currify_pricing_data',
 26:             'class'    => array( 'show_if_simple', 'show_if_variable' ),
 27:             'priority' => 80,
 28:         );
 29:         return $tabs;
 30:     }
 31: 
 32:     public function currify_product_tab_content() {
 33:         global $post;
 34:         $settings = get_option('currify_settings');
 35:         $currencies = isset($settings['currencies']) ? $settings['currencies'] : [];
 36: 
 37:         echo '<div id="currify_pricing_data" class="panel woocommerce_options_panel">';
 38:         
 39:         // Disable currency switching option
 40:         echo '<div class="options_group">';
 41:         woocommerce_wp_checkbox( array(
 42:             'id'            => '_currify_disable_switching',
 43:             'label'         => __( 'Disable Currency Switching', 'currify-currency-switcher' ),
 44:             'description'   => __( 'Check this box to prevent currency switching for this product. It will always be displayed and sold in the base currency.', 'currify-currency-switcher' ),
 45:             'desc_tip'      => true,
 46:         ) );
 47:         echo '</div>';
 48: 
 49: 
 50:         echo '<h2>' . esc_html__('Fixed Pricing per Currency', 'currify-currency-switcher') . '</h2>';
 51:         echo '<p>' . esc_html__('Enter fixed prices for this product in other currencies. Leave blank to use the automatically converted price. These settings are ignored if currency switching is disabled above.', 'currify-currency-switcher') . '</p>';
 52: 
 53:         foreach ($currencies as $currency) {
 54:             $currency_code = $currency['code'];
 55:             if ($currency_code === get_option('woocommerce_currency')) continue;
 56: 
 57:             echo '<div class="options_group">';
 58:             
 59:             woocommerce_wp_text_input( array(
 60:                 'id'          => '_currify_fixed_price_' . $currency_code,
 61:                 'label'       => __( 'Regular Price', 'currify-currency-switcher' ) . ' (' . $currency_code . ')',
 62:                 'placeholder' => '',
 63:                 'desc_tip'    => 'true',
 64:                 'description' => sprintf( esc_html__( 'Set a fixed regular price in %s.', 'currify-currency-switcher' ), $currency_code ),
 65:                 'data_type'   => 'price',
 66:             ) );
 67:             
 68:             woocommerce_wp_text_input( array(
 69:                 'id'          => '_currify_fixed_sale_price_' . $currency_code,
 70:                 'label'       => __( 'Sale Price', 'currify-currency-switcher' ) . ' (' . $currency_code . ')',
 71:                 'placeholder' => '',
 72:                 'desc_tip'    => 'true',
 73:                 'description' => sprintf( esc_html__( 'Set a fixed sale price in %s.', 'currify-currency-switcher' ), $currency_code ),
 74:                 'data_type'   => 'price',
 75:             ) );
 76: 
 77:             echo '</div>';
 78:         }
 79: 
 80:         echo '</div>';
 81:     }
 82: 
 83:     public function save_currify_product_meta( $post_id ) {
 84:         // Save the disable switching checkbox
 85:         $disable_switching = isset( $_POST['_currify_disable_switching'] ) ? 'yes' : 'no';
 86:         update_post_meta( $post_id, '_currify_disable_switching', $disable_switching );
 87: 
 88:         $settings = get_option('currify_settings');
 89:         $currencies = isset($settings['currencies']) ? $settings['currencies'] : [];
 90: 
 91:         foreach ($currencies as $currency) {
 92:              $currency_code = $currency['code'];
 93:              if ($currency_code === get_option('woocommerce_currency')) continue;
 94: 
 95:              $regular_price_key = '_currify_fixed_price_' . $currency_code;
 96:              if (isset($_POST[$regular_price_key])) {
 97:                  $price = wc_format_decimal(sanitize_text_field($_POST[$regular_price_key]));
 98:                  update_post_meta($post_id, $regular_price_key, $price);
 99:              }
100:              
101:              $sale_price_key = '_currify_fixed_sale_price_' . $currency_code;
102:              if (isset($_POST[$sale_price_key])) {
103:                  $price = wc_format_decimal(sanitize_text_field($_POST[$sale_price_key]));
104:                  update_post_meta($post_id, $sale_price_key, $price);
105:              }
106:         }
107:     }
108: 
109:     public function display_admin_bargain_field() {
110:         global $product;
111:         if (current_user_can('manage_woocommerce') && $product && is_product()) {
112:             ?>
113:             <div class="currify-admin-bargain-wrapper" style="margin-top: 15px; border: 1px dashed #ccc; padding: 10px;">
114:                 <label for="currify-bargain-price"><?php esc_html_e('Admin Bargain Price:', 'currify-currency-switcher'); ?></label>
115:                 <input type="text" id="currify-bargain-price" name="currify_bargain_price" class="input-text wc_input_price" placeholder="<?php esc_attr_e('Enter price in current currency', 'currify-currency-switcher'); ?>" />
116:                 <input type="hidden" id="currify-bargain-base-price" name="currify_bargain_base_price" value="" />
117:                 <p class="description"><?php esc_html_e('Shop Manager only: Enter a price in the currently displayed currency. The base price for the cart will be calculated automatically.', 'currify-currency-switcher'); ?></p>
118:             </div>
119:             <?php
120:         }
121:     }
122: 
123:     public function save_bargain_price_to_cart($cart_item_data, $product_id, $variation_id) {
124:         if (isset($_POST['currify_bargain_base_price']) && !empty($_POST['currify_bargain_base_price']) && isset($_POST['currify_bargain_currency'])) {
125:             $base_price = floatval(sanitize_text_field($_POST['currify_bargain_base_price']));
126:             
127:             $product = wc_get_product($product_id);
128:             $original_price = $product->get_price('edit');
129:             
130:             $cart_item_data['currify_bargain_data'] = array(
131:                 'base_price' => $base_price,
132:                 'original_price' => $original_price,
133:                 'user_input_price' => sanitize_text_field($_POST['currify_bargain_price']),
134:                 'currency' => sanitize_text_field($_POST['currify_bargain_currency'])
135:             );
136:             
137:             // Set the price for cart calculations
138:             $cart_item_data['data']->set_price($base_price);
139:         }
140:         return $cart_item_data;
141:     }
142: 
143:     public function display_bargain_price_in_cart($item_data, $cart_item) {
144:         if (isset($cart_item['currify_bargain_data'])) {
145:             $bargain_data = $cart_item['currify_bargain_data'];
146:             $item_data[] = array(
147:                 'key'     => __('Bargain Price', 'currify-currency-switcher'),
148:                 'value'   => wc_price($bargain_data['user_input_price'], ['currency' => $bargain_data['currency']]),
149:                 'display' => '',
150:             );
151:             $item_data[] = array(
152:                 'key'     => __('Original Price', 'currify-currency-switcher'),
153:                 'value'   => '<del>' . wc_price($bargain_data['original_price']) . '</del>',
154:                 'display' => '',
155:             );
156:         }
157:         return $item_data;
158:     }
159: 
160:     public function save_bargain_price_to_order_item($item, $cart_item_key, $values, $order) {
161:         if (isset($values['currify_bargain_data'])) {
162:             $bargain_data = $values['currify_bargain_data'];
163:             $item->add_meta_data('_currify_bargain_price', $bargain_data['user_input_price']);
164:             $item->add_meta_data('_currify_bargain_currency', $bargain_data['currency']);
165:             $item->add_meta_data('_currify_original_price', $bargain_data['original_price']);
166:             $item->add_meta_data('_currify_bargain_discount', $bargain_data['original_price'] - $bargain_data['base_price']);
167:         }
168:     }
169: }

================
File: code_1/currify-currency-switcher.txt
================
  1: <?php
  2: /**
  3:  * Plugin Name:       Currify Currency Switcher
  4:  * Plugin URI:        https://example.com/
  5:  * Description:       An advanced multi-currency plugin for WooCommerce with AJAX-based price switching, multi-currency checkout, and partial payment management.
  6:  * Version:           1.1.0
  7:  * Author:            Your Name
  8:  * Author URI:        https://example.com/
  9:  * License:           GPL-2.0+
 10:  * License URI:       http://www.gnu.org/licenses/gpl-2.0.txt
 11:  * Text Domain:       currify-currency-switcher
 12:  * Domain Path:       /languages
 13:  * WC requires at least: 5.0
 14:  * WC tested up to: 8.4
 15:  * Declare-HPOS-Compatibility: true
 16:  */
 17: 
 18: if ( ! defined( 'ABSPATH' ) ) {
 19:     exit; // Exit if accessed directly.
 20: }
 21: 
 22: // Check if WooCommerce is active
 23: if ( ! in_array( 'woocommerce/woocommerce.php', apply_filters( 'active_plugins', get_option( 'active_plugins' ) ) ) ) {
 24:     add_action( 'admin_notices', 'currify_woocommerce_not_active_notice' );
 25:     function currify_woocommerce_not_active_notice() {
 26:         ?>
 27:         <div class="error">
 28:             <p><?php esc_html_e( 'Currify Currency Switcher requires WooCommerce to be installed and active.', 'currify-currency-switcher' ); ?></p>
 29:         </div>
 30:         <?php
 31:     }
 32:     return;
 33: }
 34: 
 35: define( 'CURRIFY_VERSION', '1.1.0' );
 36: define( 'CURRIFY_PLUGIN_DIR', plugin_dir_path( __FILE__ ) );
 37: define( 'CURRIFY_PLUGIN_URL', plugin_dir_url( __FILE__ ) );
 38: 
 39: /**
 40:  * The main plugin class.
 41:  */
 42: final class Currify_Currency_Switcher {
 43: 
 44:     /**
 45:      * The single instance of the class.
 46:      * @var Currify_Currency_Switcher
 47:      */
 48:     protected static $_instance = null;
 49: 
 50:     /**
 51:      * Main Currify_Currency_Switcher Instance.
 52:      * Ensures only one instance of Currify_Currency_Switcher is loaded or can be loaded.
 53:      */
 54:     public static function instance() {
 55:         if ( is_null( self::$_instance ) ) {
 56:             self::$_instance = new self();
 57:         }
 58:         return self::$_instance;
 59:     }
 60: 
 61:     /**
 62:      * Constructor.
 63:      */
 64:     private function __construct() {
 65:         $this->includes();
 66:         $this->init_hooks();
 67:     }
 68: 
 69:     /**
 70:      * Include required core files.
 71:      */
 72:     public function includes() {
 73:         require_once CURRIFY_PLUGIN_DIR . 'includes/class-admin-debug.txt';
 74:         require_once CURRIFY_PLUGIN_DIR . 'includes/class-admin-geolocation.txt';
 75:         require_once CURRIFY_PLUGIN_DIR . 'includes/class-admin-appearance.txt';
 76:         require_once CURRIFY_PLUGIN_DIR . 'includes/class-admin-settings.txt';
 77:         require_once CURRIFY_PLUGIN_DIR . 'includes/class-frontend-logic.txt';
 78:         require_once CURRIFY_PLUGIN_DIR . 'includes/class-product-meta.txt';
 79:         require_once CURRIFY_PLUGIN_DIR . 'includes/class-order-meta.txt';
 80:     }
 81: 
 82:     /**
 83:      * Hook into actions and filters.
 84:      */
 85:     private function init_hooks() {
 86:         add_action( 'init', array( $this, 'start_session' ), 1 );
 87:         add_action( 'plugins_loaded', array( $this, 'on_plugins_loaded' ) );
 88:         add_action( 'before_woocommerce_init', array( $this, 'declare_hpos_compatibility' ) );
 89:         register_activation_hook( __FILE__, array( $this, 'activate' ) );
 90:         register_deactivation_hook( __FILE__, array( 'Currify_Currency_Switcher', 'deactivate' ) );
 91:     }
 92:     
 93:     /**
 94:      * Starts a PHP session if one doesn't already exist.
 95:      */
 96:     public function start_session() {
 97:         if ( ! session_id() && ! headers_sent() ) {
 98:             session_start();
 99:         }
100:     }
101: 
102:     /**
103:      * Declare compatibility with High-Performance Order Storage.
104:      */
105:     public function declare_hpos_compatibility() {
106:         if ( class_exists( \Automattic\WooCommerce\Utilities\FeaturesUtil::class ) ) {
107:             \Automattic\WooCommerce\Utilities\FeaturesUtil::declare_compatibility( 'custom_order_tables', __FILE__, true );
108:         }
109:     }
110:     
111:     /**
112:      * Instantiate classes when plugins are loaded.
113:      */
114:     public function on_plugins_loaded() {
115:         $frontend_logic = new Currify_Frontend_Logic();
116:         new Currify_Admin_Settings();
117:         new Currify_Product_Meta();
118:         new Currify_Order_Meta($frontend_logic); // Pass the frontend logic instance
119:     }
120:     
121:     /**
122:      * Plugin activation.
123:      */
124:     public function activate() {
125:         flush_rewrite_rules();
126:     }
127: 
128:     /**
129:      * Plugin deactivation.
130:      */
131:     public static function deactivate() {
132:         // Unschedule cron job and delete associated options as a cleanup measure.
133:         wp_clear_scheduled_hook( 'currify_update_exchange_rates_cron' );
134:         delete_option('currify_welcome_notice_dismissed');
135:         flush_rewrite_rules();
136:         if ( session_id() ) {
137:             session_destroy();
138:         }
139:     }
140: }
141: 
142: /**
143:  * Begins execution of the plugin.
144:  */
145: function currify_run_plugin() {
146:     return Currify_Currency_Switcher::instance();
147: }
148: 
149: // Let's go!
150: currify_run_plugin();
151: ?>





================================================================
End of Codebase
================================================================
